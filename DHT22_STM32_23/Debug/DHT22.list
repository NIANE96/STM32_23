
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b68  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d2c  08003d2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08003da4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003da4  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aabc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c7e  00000000  00000000  0002ab55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0002c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002d178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016650  00000000  00000000  0002da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009afc  00000000  00000000  00044078  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086e3a  00000000  00000000  0004db74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d49ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d4a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003c8c 	.word	0x08003c8c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003c8c 	.word	0x08003c8c

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	d1ed      	bne.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__aeabi_f2uiz>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	d20e      	bcs.n	80003ba <__aeabi_f2uiz+0x22>
 800039c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80003a0:	d30b      	bcc.n	80003ba <__aeabi_f2uiz+0x22>
 80003a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80003a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80003aa:	d409      	bmi.n	80003c0 <__aeabi_f2uiz+0x28>
 80003ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80003b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003b4:	fa23 f002 	lsr.w	r0, r3, r2
 80003b8:	4770      	bx	lr
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	4770      	bx	lr
 80003c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80003c4:	d101      	bne.n	80003ca <__aeabi_f2uiz+0x32>
 80003c6:	0242      	lsls	r2, r0, #9
 80003c8:	d102      	bne.n	80003d0 <__aeabi_f2uiz+0x38>
 80003ca:	f04f 30ff 	mov.w	r0, #4294967295
 80003ce:	4770      	bx	lr
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop

080003d8 <__aeabi_uldivmod>:
 80003d8:	b953      	cbnz	r3, 80003f0 <__aeabi_uldivmod+0x18>
 80003da:	b94a      	cbnz	r2, 80003f0 <__aeabi_uldivmod+0x18>
 80003dc:	2900      	cmp	r1, #0
 80003de:	bf08      	it	eq
 80003e0:	2800      	cmpeq	r0, #0
 80003e2:	bf1c      	itt	ne
 80003e4:	f04f 31ff 	movne.w	r1, #4294967295
 80003e8:	f04f 30ff 	movne.w	r0, #4294967295
 80003ec:	f000 b974 	b.w	80006d8 <__aeabi_idiv0>
 80003f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f8:	f000 f806 	bl	8000408 <__udivmoddi4>
 80003fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000400:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000404:	b004      	add	sp, #16
 8000406:	4770      	bx	lr

08000408 <__udivmoddi4>:
 8000408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800040c:	468c      	mov	ip, r1
 800040e:	4604      	mov	r4, r0
 8000410:	9e08      	ldr	r6, [sp, #32]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d14b      	bne.n	80004ae <__udivmoddi4+0xa6>
 8000416:	428a      	cmp	r2, r1
 8000418:	4615      	mov	r5, r2
 800041a:	d967      	bls.n	80004ec <__udivmoddi4+0xe4>
 800041c:	fab2 f282 	clz	r2, r2
 8000420:	b14a      	cbz	r2, 8000436 <__udivmoddi4+0x2e>
 8000422:	f1c2 0720 	rsb	r7, r2, #32
 8000426:	fa01 f302 	lsl.w	r3, r1, r2
 800042a:	fa20 f707 	lsr.w	r7, r0, r7
 800042e:	4095      	lsls	r5, r2
 8000430:	ea47 0c03 	orr.w	ip, r7, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	fbbc f7fe 	udiv	r7, ip, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e c317 	mls	r3, lr, r7, ip
 8000446:	fb07 f908 	mul.w	r9, r7, r8
 800044a:	0c21      	lsrs	r1, r4, #16
 800044c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000450:	4599      	cmp	r9, r3
 8000452:	d909      	bls.n	8000468 <__udivmoddi4+0x60>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f107 31ff 	add.w	r1, r7, #4294967295
 800045a:	f080 811c 	bcs.w	8000696 <__udivmoddi4+0x28e>
 800045e:	4599      	cmp	r9, r3
 8000460:	f240 8119 	bls.w	8000696 <__udivmoddi4+0x28e>
 8000464:	3f02      	subs	r7, #2
 8000466:	442b      	add	r3, r5
 8000468:	eba3 0309 	sub.w	r3, r3, r9
 800046c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000470:	fb0e 3310 	mls	r3, lr, r0, r3
 8000474:	fb00 f108 	mul.w	r1, r0, r8
 8000478:	b2a4      	uxth	r4, r4
 800047a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047e:	42a1      	cmp	r1, r4
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0x8e>
 8000482:	192c      	adds	r4, r5, r4
 8000484:	f100 33ff 	add.w	r3, r0, #4294967295
 8000488:	f080 8107 	bcs.w	800069a <__udivmoddi4+0x292>
 800048c:	42a1      	cmp	r1, r4
 800048e:	f240 8104 	bls.w	800069a <__udivmoddi4+0x292>
 8000492:	3802      	subs	r0, #2
 8000494:	442c      	add	r4, r5
 8000496:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800049a:	2700      	movs	r7, #0
 800049c:	1a64      	subs	r4, r4, r1
 800049e:	b11e      	cbz	r6, 80004a8 <__udivmoddi4+0xa0>
 80004a0:	2300      	movs	r3, #0
 80004a2:	40d4      	lsrs	r4, r2
 80004a4:	e9c6 4300 	strd	r4, r3, [r6]
 80004a8:	4639      	mov	r1, r7
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d909      	bls.n	80004c6 <__udivmoddi4+0xbe>
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	f000 80ec 	beq.w	8000690 <__udivmoddi4+0x288>
 80004b8:	2700      	movs	r7, #0
 80004ba:	e9c6 0100 	strd	r0, r1, [r6]
 80004be:	4638      	mov	r0, r7
 80004c0:	4639      	mov	r1, r7
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	fab3 f783 	clz	r7, r3
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d148      	bne.n	8000560 <__udivmoddi4+0x158>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xd0>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 80fb 	bhi.w	80006ce <__udivmoddi4+0x2c6>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb61 0303 	sbc.w	r3, r1, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	469c      	mov	ip, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d0e0      	beq.n	80004a8 <__udivmoddi4+0xa0>
 80004e6:	e9c6 4c00 	strd	r4, ip, [r6]
 80004ea:	e7dd      	b.n	80004a8 <__udivmoddi4+0xa0>
 80004ec:	b902      	cbnz	r2, 80004f0 <__udivmoddi4+0xe8>
 80004ee:	deff      	udf	#255	; 0xff
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	f040 808f 	bne.w	8000618 <__udivmoddi4+0x210>
 80004fa:	2701      	movs	r7, #1
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000502:	fa1f f985 	uxth.w	r9, r5
 8000506:	fbb1 fef8 	udiv	lr, r1, r8
 800050a:	fb08 111e 	mls	r1, r8, lr, r1
 800050e:	fb09 f00e 	mul.w	r0, r9, lr
 8000512:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000516:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800051a:	4298      	cmp	r0, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x126>
 800051e:	18eb      	adds	r3, r5, r3
 8000520:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x124>
 8000526:	4298      	cmp	r0, r3
 8000528:	f200 80cd 	bhi.w	80006c6 <__udivmoddi4+0x2be>
 800052c:	468e      	mov	lr, r1
 800052e:	1a1b      	subs	r3, r3, r0
 8000530:	fbb3 f0f8 	udiv	r0, r3, r8
 8000534:	fb08 3310 	mls	r3, r8, r0, r3
 8000538:	fb09 f900 	mul.w	r9, r9, r0
 800053c:	b2a4      	uxth	r4, r4
 800053e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000542:	45a1      	cmp	r9, r4
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x14e>
 8000546:	192c      	adds	r4, r5, r4
 8000548:	f100 33ff 	add.w	r3, r0, #4294967295
 800054c:	d202      	bcs.n	8000554 <__udivmoddi4+0x14c>
 800054e:	45a1      	cmp	r9, r4
 8000550:	f200 80b6 	bhi.w	80006c0 <__udivmoddi4+0x2b8>
 8000554:	4618      	mov	r0, r3
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800055e:	e79e      	b.n	800049e <__udivmoddi4+0x96>
 8000560:	f1c7 0520 	rsb	r5, r7, #32
 8000564:	40bb      	lsls	r3, r7
 8000566:	fa22 fc05 	lsr.w	ip, r2, r5
 800056a:	ea4c 0c03 	orr.w	ip, ip, r3
 800056e:	fa21 f405 	lsr.w	r4, r1, r5
 8000572:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000576:	fbb4 f9fe 	udiv	r9, r4, lr
 800057a:	fa1f f88c 	uxth.w	r8, ip
 800057e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000582:	fa20 f305 	lsr.w	r3, r0, r5
 8000586:	40b9      	lsls	r1, r7
 8000588:	fb09 fa08 	mul.w	sl, r9, r8
 800058c:	4319      	orrs	r1, r3
 800058e:	0c0b      	lsrs	r3, r1, #16
 8000590:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000594:	45a2      	cmp	sl, r4
 8000596:	fa02 f207 	lsl.w	r2, r2, r7
 800059a:	fa00 f307 	lsl.w	r3, r0, r7
 800059e:	d90b      	bls.n	80005b8 <__udivmoddi4+0x1b0>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a8:	f080 8088 	bcs.w	80006bc <__udivmoddi4+0x2b4>
 80005ac:	45a2      	cmp	sl, r4
 80005ae:	f240 8085 	bls.w	80006bc <__udivmoddi4+0x2b4>
 80005b2:	f1a9 0902 	sub.w	r9, r9, #2
 80005b6:	4464      	add	r4, ip
 80005b8:	eba4 040a 	sub.w	r4, r4, sl
 80005bc:	fbb4 f0fe 	udiv	r0, r4, lr
 80005c0:	fb0e 4410 	mls	r4, lr, r0, r4
 80005c4:	fb00 fa08 	mul.w	sl, r0, r8
 80005c8:	b289      	uxth	r1, r1
 80005ca:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80005ce:	45a2      	cmp	sl, r4
 80005d0:	d908      	bls.n	80005e4 <__udivmoddi4+0x1dc>
 80005d2:	eb1c 0404 	adds.w	r4, ip, r4
 80005d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80005da:	d26b      	bcs.n	80006b4 <__udivmoddi4+0x2ac>
 80005dc:	45a2      	cmp	sl, r4
 80005de:	d969      	bls.n	80006b4 <__udivmoddi4+0x2ac>
 80005e0:	3802      	subs	r0, #2
 80005e2:	4464      	add	r4, ip
 80005e4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005e8:	fba0 8902 	umull	r8, r9, r0, r2
 80005ec:	eba4 040a 	sub.w	r4, r4, sl
 80005f0:	454c      	cmp	r4, r9
 80005f2:	4641      	mov	r1, r8
 80005f4:	46ce      	mov	lr, r9
 80005f6:	d354      	bcc.n	80006a2 <__udivmoddi4+0x29a>
 80005f8:	d051      	beq.n	800069e <__udivmoddi4+0x296>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d069      	beq.n	80006d2 <__udivmoddi4+0x2ca>
 80005fe:	1a5a      	subs	r2, r3, r1
 8000600:	eb64 040e 	sbc.w	r4, r4, lr
 8000604:	fa04 f505 	lsl.w	r5, r4, r5
 8000608:	fa22 f307 	lsr.w	r3, r2, r7
 800060c:	40fc      	lsrs	r4, r7
 800060e:	431d      	orrs	r5, r3
 8000610:	e9c6 5400 	strd	r5, r4, [r6]
 8000614:	2700      	movs	r7, #0
 8000616:	e747      	b.n	80004a8 <__udivmoddi4+0xa0>
 8000618:	4095      	lsls	r5, r2
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa21 f003 	lsr.w	r0, r1, r3
 8000622:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000626:	fbb0 f7f8 	udiv	r7, r0, r8
 800062a:	fa1f f985 	uxth.w	r9, r5
 800062e:	fb08 0017 	mls	r0, r8, r7, r0
 8000632:	fa24 f303 	lsr.w	r3, r4, r3
 8000636:	4091      	lsls	r1, r2
 8000638:	fb07 fc09 	mul.w	ip, r7, r9
 800063c:	430b      	orrs	r3, r1
 800063e:	0c19      	lsrs	r1, r3, #16
 8000640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000644:	458c      	cmp	ip, r1
 8000646:	fa04 f402 	lsl.w	r4, r4, r2
 800064a:	d907      	bls.n	800065c <__udivmoddi4+0x254>
 800064c:	1869      	adds	r1, r5, r1
 800064e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000652:	d231      	bcs.n	80006b8 <__udivmoddi4+0x2b0>
 8000654:	458c      	cmp	ip, r1
 8000656:	d92f      	bls.n	80006b8 <__udivmoddi4+0x2b0>
 8000658:	3f02      	subs	r7, #2
 800065a:	4429      	add	r1, r5
 800065c:	eba1 010c 	sub.w	r1, r1, ip
 8000660:	fbb1 f0f8 	udiv	r0, r1, r8
 8000664:	fb08 1c10 	mls	ip, r8, r0, r1
 8000668:	fb00 fe09 	mul.w	lr, r0, r9
 800066c:	b299      	uxth	r1, r3
 800066e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000672:	458e      	cmp	lr, r1
 8000674:	d907      	bls.n	8000686 <__udivmoddi4+0x27e>
 8000676:	1869      	adds	r1, r5, r1
 8000678:	f100 33ff 	add.w	r3, r0, #4294967295
 800067c:	d218      	bcs.n	80006b0 <__udivmoddi4+0x2a8>
 800067e:	458e      	cmp	lr, r1
 8000680:	d916      	bls.n	80006b0 <__udivmoddi4+0x2a8>
 8000682:	3802      	subs	r0, #2
 8000684:	4429      	add	r1, r5
 8000686:	eba1 010e 	sub.w	r1, r1, lr
 800068a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800068e:	e73a      	b.n	8000506 <__udivmoddi4+0xfe>
 8000690:	4637      	mov	r7, r6
 8000692:	4630      	mov	r0, r6
 8000694:	e708      	b.n	80004a8 <__udivmoddi4+0xa0>
 8000696:	460f      	mov	r7, r1
 8000698:	e6e6      	b.n	8000468 <__udivmoddi4+0x60>
 800069a:	4618      	mov	r0, r3
 800069c:	e6fb      	b.n	8000496 <__udivmoddi4+0x8e>
 800069e:	4543      	cmp	r3, r8
 80006a0:	d2ab      	bcs.n	80005fa <__udivmoddi4+0x1f2>
 80006a2:	ebb8 0102 	subs.w	r1, r8, r2
 80006a6:	eb69 020c 	sbc.w	r2, r9, ip
 80006aa:	3801      	subs	r0, #1
 80006ac:	4696      	mov	lr, r2
 80006ae:	e7a4      	b.n	80005fa <__udivmoddi4+0x1f2>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e7e8      	b.n	8000686 <__udivmoddi4+0x27e>
 80006b4:	4608      	mov	r0, r1
 80006b6:	e795      	b.n	80005e4 <__udivmoddi4+0x1dc>
 80006b8:	4607      	mov	r7, r0
 80006ba:	e7cf      	b.n	800065c <__udivmoddi4+0x254>
 80006bc:	4681      	mov	r9, r0
 80006be:	e77b      	b.n	80005b8 <__udivmoddi4+0x1b0>
 80006c0:	3802      	subs	r0, #2
 80006c2:	442c      	add	r4, r5
 80006c4:	e747      	b.n	8000556 <__udivmoddi4+0x14e>
 80006c6:	f1ae 0e02 	sub.w	lr, lr, #2
 80006ca:	442b      	add	r3, r5
 80006cc:	e72f      	b.n	800052e <__udivmoddi4+0x126>
 80006ce:	4638      	mov	r0, r7
 80006d0:	e707      	b.n	80004e2 <__udivmoddi4+0xda>
 80006d2:	4637      	mov	r7, r6
 80006d4:	e6e8      	b.n	80004a8 <__udivmoddi4+0xa0>
 80006d6:	bf00      	nop

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <DWT_Delay_us>:

uint32_t DWT_Delay_Init(void);

// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <DWT_Delay_us+0x44>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80006ea:	f002 fbe5 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 80006ee:	4602      	mov	r2, r0
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <DWT_Delay_us+0x48>)
 80006f2:	fba3 2302 	umull	r2, r3, r3, r2
 80006f6:	0c9b      	lsrs	r3, r3, #18
 80006f8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000704:	bf00      	nop
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <DWT_Delay_us+0x44>)
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1ad2      	subs	r2, r2, r3
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	1acb      	subs	r3, r1, r3
 8000714:	429a      	cmp	r2, r3
 8000716:	d3f6      	bcc.n	8000706 <DWT_Delay_us+0x2a>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	e0001000 	.word	0xe0001000
 8000724:	431bde83 	.word	0x431bde83

08000728 <Data_Output>:
#include <DHT22.h>
#include "timer.h"
#include "stm32l1xx_hal.h"

void Data_Output (GPIO_TypeDef *PORT, uint16_t PIN)
  {
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //pushpull
 8000748:	2301      	movs	r3, #1
 800074a:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 ff58 	bl	8001608 <HAL_GPIO_Init>
  }
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Data_Input>:

void Data_Input (GPIO_TypeDef *PORT, uint16_t PIN)
  {
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 800077c:	887b      	ldrh	r3, [r7, #2]
 800077e:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 ff3c 	bl	8001608 <HAL_GPIO_Init>
  }
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <Read_data>:

void Read_data (uint8_t *data)
  {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0;i<8;i++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e052      	b.n	800084c <Read_data+0xb4>
  	{
  		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)    // if the pin is low
 80007a6:	2101      	movs	r1, #1
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <Read_data+0xc4>)
 80007aa:	f001 f8bb 	bl	8001924 <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d11c      	bne.n	80007ee <Read_data+0x56>
  		{
  			(*data)&= ~(1<<(7-i));   // write 0
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b25a      	sxtb	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1c3 0307 	rsb	r3, r3, #7
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	4013      	ands	r3, r2
 80007ce:	b25b      	sxtb	r3, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 80007d6:	bf00      	nop
 80007d8:	2101      	movs	r1, #1
 80007da:	4820      	ldr	r0, [pc, #128]	; (800085c <Read_data+0xc4>)
 80007dc:	f001 f8a2 	bl	8001924 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f8      	beq.n	80007d8 <Read_data+0x40>
  			DWT_Delay_us(40);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f7ff ff78 	bl	80006dc <DWT_Delay_us>
 80007ec:	e02b      	b.n	8000846 <Read_data+0xae>
  		}
  		else
  		{
  			(*data)|= (1<<(7-i));  // if the pin is high, write 1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25a      	sxtb	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	b25b      	sxtb	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	b2da      	uxtb	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<100;k++)
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	e009      	b.n	8000826 <Read_data+0x8e>
  			{
  				if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000812:	2101      	movs	r1, #1
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <Read_data+0xc4>)
 8000816:	f001 f885 	bl	8001924 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <Read_data+0x96>
  			for (k=0;k<100;k++)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	3301      	adds	r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	2b63      	cmp	r3, #99	; 0x63
 800082a:	ddf2      	ble.n	8000812 <Read_data+0x7a>
 800082c:	e000      	b.n	8000830 <Read_data+0x98>
  				  {
  				  	break;
 800082e:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 8000830:	bf00      	nop
 8000832:	2101      	movs	r1, #1
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <Read_data+0xc4>)
 8000836:	f001 f875 	bl	8001924 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d0f8      	beq.n	8000832 <Read_data+0x9a>
  			DWT_Delay_us(40);
 8000840:	2028      	movs	r0, #40	; 0x28
 8000842:	f7ff ff4b 	bl	80006dc <DWT_Delay_us>
  	for (i=0;i<8;i++)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b07      	cmp	r3, #7
 8000850:	dda9      	ble.n	80007a6 <Read_data+0xe>
  		}
  	 }
  }
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40020000 	.word	0x40020000

08000860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0xc0>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a29      	ldr	r2, [pc, #164]	; (8000920 <MX_GPIO_Init+0xc0>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <MX_GPIO_Init+0xc0>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_GPIO_Init+0xc0>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a23      	ldr	r2, [pc, #140]	; (8000920 <MX_GPIO_Init+0xc0>)
 8000894:	f043 0320 	orr.w	r3, r3, #32
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_GPIO_Init+0xc0>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 0320 	and.w	r3, r3, #32
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a17      	ldr	r2, [pc, #92]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_GPIO_Init+0xc0>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2121      	movs	r1, #33	; 0x21
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0xc4>)
 80008dc:	f001 f839 	bl	8001952 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_GPIO_Init+0xc8>)
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_GPIO_Init+0xcc>)
 80008f6:	f000 fe87 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80008fa:	2321      	movs	r3, #33	; 0x21
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_GPIO_Init+0xc4>)
 8000912:	f000 fe79 	bl	8001608 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	10110000 	.word	0x10110000
 800092c:	40020800 	.word	0x40020800

08000930 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C1_Init+0x50>)
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <MX_I2C1_Init+0x54>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C1_Init+0x50>)
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_I2C1_Init+0x58>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_I2C1_Init+0x50>)
 800094e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000952:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_I2C1_Init+0x50>)
 800096e:	f001 f809 	bl	8001984 <HAL_I2C_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000978:	f000 fb70 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000a0 	.word	0x200000a0
 8000984:	40005400 	.word	0x40005400
 8000988:	000186a0 	.word	0x000186a0

0800098c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d128      	bne.n	8000a00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <HAL_I2C_MspInit+0x84>)
 80009e4:	f000 fe10 	bl	8001608 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	6253      	str	r3, [r2, #36]	; 0x24
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400

08000a14 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f043 030c 	orr.w	r3, r3, #12
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000a40:	f107 0118 	add.w	r1, r7, #24
 8000a44:	230a      	movs	r3, #10
 8000a46:	2202      	movs	r2, #2
 8000a48:	486c      	ldr	r0, [pc, #432]	; (8000bfc <lcd_init+0x1e8>)
 8000a4a:	f002 fb14 	bl	8003076 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000a4e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000a52:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000a54:	f107 0114 	add.w	r1, r7, #20
 8000a58:	230a      	movs	r3, #10
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	4867      	ldr	r0, [pc, #412]	; (8000bfc <lcd_init+0x1e8>)
 8000a5e:	f002 fb0a 	bl	8003076 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2205      	movs	r2, #5
 8000a66:	217c      	movs	r1, #124	; 0x7c
 8000a68:	69f8      	ldr	r0, [r7, #28]
 8000a6a:	f001 f9c1 	bl	8001df0 <HAL_I2C_IsDeviceReady>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8000a72:	f107 0113 	add.w	r1, r7, #19
 8000a76:	230a      	movs	r3, #10
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4860      	ldr	r0, [pc, #384]	; (8000bfc <lcd_init+0x1e8>)
 8000a7c:	f002 fafb 	bl	8003076 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000a80:	2032      	movs	r0, #50	; 0x32
 8000a82:	f000 fcbb 	bl	80013fc <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000a86:	f107 0218 	add.w	r2, r7, #24
 8000a8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2302      	movs	r3, #2
 8000a92:	217c      	movs	r1, #124	; 0x7c
 8000a94:	69f8      	ldr	r0, [r7, #28]
 8000a96:	f001 f8ad 	bl	8001bf4 <HAL_I2C_Master_Transmit>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000a9e:	f107 0112 	add.w	r1, r7, #18
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4855      	ldr	r0, [pc, #340]	; (8000bfc <lcd_init+0x1e8>)
 8000aa8:	f002 fae5 	bl	8003076 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000aac:	2032      	movs	r0, #50	; 0x32
 8000aae:	f000 fca5 	bl	80013fc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000ab2:	f107 0218 	add.w	r2, r7, #24
 8000ab6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2302      	movs	r3, #2
 8000abe:	217c      	movs	r1, #124	; 0x7c
 8000ac0:	69f8      	ldr	r0, [r7, #28]
 8000ac2:	f001 f897 	bl	8001bf4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f000 fc98 	bl	80013fc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000acc:	f107 0218 	add.w	r2, r7, #24
 8000ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	217c      	movs	r1, #124	; 0x7c
 8000ada:	69f8      	ldr	r0, [r7, #28]
 8000adc:	f001 f88a 	bl	8001bf4 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000af2:	f107 0218 	add.w	r2, r7, #24
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2302      	movs	r3, #2
 8000afe:	217c      	movs	r1, #124	; 0x7c
 8000b00:	69f8      	ldr	r0, [r7, #28]
 8000b02:	f001 f877 	bl	8001bf4 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000b06:	2301      	movs	r3, #1
 8000b08:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000b0a:	f107 0218 	add.w	r2, r7, #24
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2302      	movs	r3, #2
 8000b16:	217c      	movs	r1, #124	; 0x7c
 8000b18:	69f8      	ldr	r0, [r7, #28]
 8000b1a:	f001 f86b 	bl	8001bf4 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 fc6c 	bl	80013fc <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2202      	movs	r2, #2
 8000b28:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	789b      	ldrb	r3, [r3, #2]
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000b36:	f107 0218 	add.w	r2, r7, #24
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2302      	movs	r3, #2
 8000b42:	217c      	movs	r1, #124	; 0x7c
 8000b44:	69f8      	ldr	r0, [r7, #28]
 8000b46:	f001 f855 	bl	8001bf4 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000b52:	f107 0210 	add.w	r2, r7, #16
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	21c4      	movs	r1, #196	; 0xc4
 8000b60:	69f8      	ldr	r0, [r7, #28]
 8000b62:	f001 f847 	bl	8001bf4 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000b66:	2308      	movs	r3, #8
 8000b68:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8000b6a:	23ff      	movs	r3, #255	; 0xff
 8000b6c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000b6e:	f107 0210 	add.w	r2, r7, #16
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2302      	movs	r3, #2
 8000b7a:	21c4      	movs	r1, #196	; 0xc4
 8000b7c:	69f8      	ldr	r0, [r7, #28]
 8000b7e:	f001 f839 	bl	8001bf4 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000b82:	2301      	movs	r3, #1
 8000b84:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000b86:	2320      	movs	r3, #32
 8000b88:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000b8a:	f107 0210 	add.w	r2, r7, #16
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2302      	movs	r3, #2
 8000b96:	21c4      	movs	r1, #196	; 0xc4
 8000b98:	69f8      	ldr	r0, [r7, #28]
 8000b9a:	f001 f82b 	bl	8001bf4 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000ba6:	f107 020c 	add.w	r2, r7, #12
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	21c4      	movs	r1, #196	; 0xc4
 8000bb4:	69f8      	ldr	r0, [r7, #28]
 8000bb6:	f001 f81d 	bl	8001bf4 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000bbe:	23ff      	movs	r3, #255	; 0xff
 8000bc0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000bc2:	f107 020c 	add.w	r2, r7, #12
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2302      	movs	r3, #2
 8000bce:	21c4      	movs	r1, #196	; 0xc4
 8000bd0:	69f8      	ldr	r0, [r7, #28]
 8000bd2:	f001 f80f 	bl	8001bf4 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000bda:	23ff      	movs	r3, #255	; 0xff
 8000bdc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2302      	movs	r3, #2
 8000bea:	21c4      	movs	r1, #196	; 0xc4
 8000bec:	69f8      	ldr	r0, [r7, #28]
 8000bee:	f001 f801 	bl	8001bf4 <HAL_I2C_Master_Transmit>


}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000fc 	.word	0x200000fc

08000c00 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000c16:	e011      	b.n	8000c3c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000c22:	f107 020c 	add.w	r2, r7, #12
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	217c      	movs	r1, #124	; 0x7c
 8000c30:	6938      	ldr	r0, [r7, #16]
 8000c32:	f000 ffdf 	bl	8001bf4 <HAL_I2C_Master_Transmit>
            i++;
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1e7      	bne.n	8000c18 <lcd_print+0x18>
   }
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000c64:	78bb      	ldrb	r3, [r7, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d104      	bne.n	8000c74 <lcd_position+0x24>
    {
        col = col | 0x80;
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c70:	70fb      	strb	r3, [r7, #3]
 8000c72:	e003      	b.n	8000c7c <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c7a:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000c84:	f107 0208 	add.w	r2, r7, #8
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2302      	movs	r3, #2
 8000c90:	217c      	movs	r1, #124	; 0x7c
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f000 ffae 	bl	8001bf4 <HAL_I2C_Master_Transmit>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
 8000caa:	460b      	mov	r3, r1
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <reglagecouleur+0x74>)
 8000cb4:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000cbe:	f107 0210 	add.w	r2, r7, #16
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2302      	movs	r3, #2
 8000cca:	21c4      	movs	r1, #196	; 0xc4
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f000 ff91 	bl	8001bf4 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000cda:	f107 020c 	add.w	r2, r7, #12
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	21c4      	movs	r1, #196	; 0xc4
 8000ce8:	6978      	ldr	r0, [r7, #20]
 8000cea:	f000 ff83 	bl	8001bf4 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000cf2:	797b      	ldrb	r3, [r7, #5]
 8000cf4:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000cf6:	f107 0208 	add.w	r2, r7, #8
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2302      	movs	r3, #2
 8000d02:	21c4      	movs	r1, #196	; 0xc4
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f000 ff75 	bl	8001bf4 <HAL_I2C_Master_Transmit>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000a0 	.word	0x200000a0

08000d18 <DWT_Delay_us>:
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <DWT_Delay_us+0x44>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000d26:	f002 f8c7 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <DWT_Delay_us+0x48>)
 8000d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8000d32:	0c9b      	lsrs	r3, r3, #18
 8000d34:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000d40:	bf00      	nop
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <DWT_Delay_us+0x44>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1acb      	subs	r3, r1, r3
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d3f6      	bcc.n	8000d42 <DWT_Delay_us+0x2a>
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	e0001000 	.word	0xe0001000
 8000d60:	431bde83 	.word	0x431bde83

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b0a1      	sub	sp, #132	; 0x84
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char buf[50];
char buf1[50];
float partieEntiere, partieDecimal,partieEntiere1, partieDecimal1;
int i=0, check=0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d6e:	2300      	movs	r3, #0
 8000d70:	67bb      	str	r3, [r7, #120]	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d72:	f000 fad4 	bl	800131e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d76:	f000 f923 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7a:	f7ff fd71 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d7e:	f000 fa3b 	bl	80011f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d82:	f7ff fdd5 	bl	8000930 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8000d86:	497f      	ldr	r1, [pc, #508]	; (8000f84 <main+0x220>)
 8000d88:	487f      	ldr	r0, [pc, #508]	; (8000f88 <main+0x224>)
 8000d8a:	f7ff fe43 	bl	8000a14 <lcd_init>
  lcd_position(&hi2c1,0,0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	487d      	ldr	r0, [pc, #500]	; (8000f88 <main+0x224>)
 8000d94:	f7ff ff5c 	bl	8000c50 <lcd_position>
  reglagecouleur(0,0,255);
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ff7f 	bl	8000ca0 <reglagecouleur>
  /* USER CODE END 2 */
  DWT_Delay_Init();
 8000da2:	f000 f9f9 	bl	8001198 <DWT_Delay_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(3000);
 8000da6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000daa:	f000 fb27 	bl	80013fc <HAL_Delay>
	  	  Data_Output(GPIOA, GPIO_PIN_0);
 8000dae:	2101      	movs	r1, #1
 8000db0:	4876      	ldr	r0, [pc, #472]	; (8000f8c <main+0x228>)
 8000db2:	f7ff fcb9 	bl	8000728 <Data_Output>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2101      	movs	r1, #1
 8000dba:	4874      	ldr	r0, [pc, #464]	; (8000f8c <main+0x228>)
 8000dbc:	f000 fdc9 	bl	8001952 <HAL_GPIO_WritePin>
	  	  DWT_Delay_us(1200);
 8000dc0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000dc4:	f7ff ffa8 	bl	8000d18 <DWT_Delay_us>
	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2101      	movs	r1, #1
 8000dcc:	486f      	ldr	r0, [pc, #444]	; (8000f8c <main+0x228>)
 8000dce:	f000 fdc0 	bl	8001952 <HAL_GPIO_WritePin>
	  	  DWT_Delay_us(30);
 8000dd2:	201e      	movs	r0, #30
 8000dd4:	f7ff ffa0 	bl	8000d18 <DWT_Delay_us>
	  	  Data_Input(GPIOA, GPIO_PIN_0);
 8000dd8:	2101      	movs	r1, #1
 8000dda:	486c      	ldr	r0, [pc, #432]	; (8000f8c <main+0x228>)
 8000ddc:	f7ff fcc0 	bl	8000760 <Data_Input>


	  	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 8000de0:	bf00      	nop
 8000de2:	2101      	movs	r1, #1
 8000de4:	4869      	ldr	r0, [pc, #420]	; (8000f8c <main+0x228>)
 8000de6:	f000 fd9d 	bl	8001924 <HAL_GPIO_ReadPin>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f8      	beq.n	8000de2 <main+0x7e>

	  	  for (i=0;i<100;i++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000df4:	e00c      	b.n	8000e10 <main+0xac>
	  	  {
	  	  		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8000df6:	2101      	movs	r1, #1
 8000df8:	4864      	ldr	r0, [pc, #400]	; (8000f8c <main+0x228>)
 8000dfa:	f000 fd93 	bl	8001924 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <main+0xa6>
	  	  		  {
	  	  			check = i;
 8000e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e06:	67bb      	str	r3, [r7, #120]	; 0x78
	  	  			break;
 8000e08:	e005      	b.n	8000e16 <main+0xb2>
	  	  for (i=0;i<100;i++)
 8000e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e12:	2b63      	cmp	r3, #99	; 0x63
 8000e14:	ddef      	ble.n	8000df6 <main+0x92>
	  	  		  }

	  	  }


	  	 while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)));
 8000e16:	bf00      	nop
 8000e18:	2101      	movs	r1, #1
 8000e1a:	485c      	ldr	r0, [pc, #368]	; (8000f8c <main+0x228>)
 8000e1c:	f000 fd82 	bl	8001924 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f8      	beq.n	8000e18 <main+0xb4>
	  	  DWT_Delay_us(40);
 8000e26:	2028      	movs	r0, #40	; 0x28
 8000e28:	f7ff ff76 	bl	8000d18 <DWT_Delay_us>

	  	  Read_data(&dataH1);
 8000e2c:	4858      	ldr	r0, [pc, #352]	; (8000f90 <main+0x22c>)
 8000e2e:	f7ff fcb3 	bl	8000798 <Read_data>
	  	  Read_data(&dataH2);
 8000e32:	4858      	ldr	r0, [pc, #352]	; (8000f94 <main+0x230>)
 8000e34:	f7ff fcb0 	bl	8000798 <Read_data>
	  	  Read_data(&dataT1);
 8000e38:	4857      	ldr	r0, [pc, #348]	; (8000f98 <main+0x234>)
 8000e3a:	f7ff fcad 	bl	8000798 <Read_data>
	  	  Read_data(&dataT2);
 8000e3e:	4857      	ldr	r0, [pc, #348]	; (8000f9c <main+0x238>)
 8000e40:	f7ff fcaa 	bl	8000798 <Read_data>


	  	  RH = (dataH1<<8) | dataH2;
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <main+0x22c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <main+0x230>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <main+0x23c>)
 8000e5a:	801a      	strh	r2, [r3, #0]
	  	  TEMP = (dataT1<<8) | dataT2;
 8000e5c:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <main+0x234>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <main+0x238>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <main+0x240>)
 8000e72:	801a      	strh	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	  partieEntiere = TEMP/10 ;
 8000e74:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <main+0x240>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4a4b      	ldr	r2, [pc, #300]	; (8000fa8 <main+0x244>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fa34 	bl	80002f0 <__aeabi_i2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	677b      	str	r3, [r7, #116]	; 0x74
	  partieDecimal = ((TEMP%10)+48);
 8000e8c:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <main+0x240>)
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <main+0x244>)
 8000e92:	fba3 1302 	umull	r1, r3, r3, r2
 8000e96:	08d9      	lsrs	r1, r3, #3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3330      	adds	r3, #48	; 0x30
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa22 	bl	80002f0 <__aeabi_i2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	673b      	str	r3, [r7, #112]	; 0x70



	  partieEntiere1= RH/10 ;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <main+0x23c>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	4a3c      	ldr	r2, [pc, #240]	; (8000fa8 <main+0x244>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	08db      	lsrs	r3, r3, #3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fa16 	bl	80002f0 <__aeabi_i2f>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
	  partieDecimal1 = ((RH%10)+48);
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <main+0x23c>)
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <main+0x244>)
 8000ece:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed2:	08d9      	lsrs	r1, r3, #3
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3330      	adds	r3, #48	; 0x30
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fa04 	bl	80002f0 <__aeabi_i2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	66bb      	str	r3, [r7, #104]	; 0x68
	  sprintf((char*)buf,"%u.%u C", (unsigned int) partieEntiere,(unsigned int) partieDecimal);
 8000eec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000eee:	f7ff fa53 	bl	8000398 <__aeabi_f2uiz>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000ef6:	f7ff fa4f 	bl	8000398 <__aeabi_f2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000f00:	4622      	mov	r2, r4
 8000f02:	492a      	ldr	r1, [pc, #168]	; (8000fac <main+0x248>)
 8000f04:	f002 fab0 	bl	8003468 <siprintf>
	  sprintf((char*)buf1,"%u.%u ", (unsigned int) partieEntiere1,(unsigned int) partieDecimal1);
 8000f08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f0a:	f7ff fa45 	bl	8000398 <__aeabi_f2uiz>
 8000f0e:	4604      	mov	r4, r0
 8000f10:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000f12:	f7ff fa41 	bl	8000398 <__aeabi_f2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4638      	mov	r0, r7
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	4924      	ldr	r1, [pc, #144]	; (8000fb0 <main+0x24c>)
 8000f1e:	f002 faa3 	bl	8003468 <siprintf>
	  	  	  	lcd_position(&hi2c1,0,0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	4818      	ldr	r0, [pc, #96]	; (8000f88 <main+0x224>)
 8000f28:	f7ff fe92 	bl	8000c50 <lcd_position>
	  			lcd_print(&hi2c1,"Temp :  ");
 8000f2c:	4921      	ldr	r1, [pc, #132]	; (8000fb4 <main+0x250>)
 8000f2e:	4816      	ldr	r0, [pc, #88]	; (8000f88 <main+0x224>)
 8000f30:	f7ff fe66 	bl	8000c00 <lcd_print>
	  			lcd_position(&hi2c1,7,0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2107      	movs	r1, #7
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <main+0x224>)
 8000f3a:	f7ff fe89 	bl	8000c50 <lcd_position>
	  			lcd_print(&hi2c1,buf);
 8000f3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <main+0x224>)
 8000f46:	f7ff fe5b 	bl	8000c00 <lcd_print>
	  			lcd_position(&hi2c1,0,1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <main+0x224>)
 8000f50:	f7ff fe7e 	bl	8000c50 <lcd_position>
	  			lcd_print(&hi2c1,"Hum  : ");
 8000f54:	4918      	ldr	r1, [pc, #96]	; (8000fb8 <main+0x254>)
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <main+0x224>)
 8000f58:	f7ff fe52 	bl	8000c00 <lcd_print>
	  			lcd_position(&hi2c1,7,1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2107      	movs	r1, #7
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <main+0x224>)
 8000f62:	f7ff fe75 	bl	8000c50 <lcd_position>
	  			lcd_print(&hi2c1,buf1);
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <main+0x224>)
 8000f6c:	f7ff fe48 	bl	8000c00 <lcd_print>
	  			lcd_print(&hi2c1,"%");
 8000f70:	4912      	ldr	r1, [pc, #72]	; (8000fbc <main+0x258>)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <main+0x224>)
 8000f74:	f7ff fe44 	bl	8000c00 <lcd_print>

	  			HAL_Delay(1000);
 8000f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7c:	f000 fa3e 	bl	80013fc <HAL_Delay>
	  HAL_Delay(3000);
 8000f80:	e711      	b.n	8000da6 <main+0x42>
 8000f82:	bf00      	nop
 8000f84:	2000008c 	.word	0x2000008c
 8000f88:	200000a0 	.word	0x200000a0
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	200000f5 	.word	0x200000f5
 8000f94:	200000f8 	.word	0x200000f8
 8000f98:	200000f7 	.word	0x200000f7
 8000f9c:	200000f4 	.word	0x200000f4
 8000fa0:	20000090 	.word	0x20000090
 8000fa4:	20000092 	.word	0x20000092
 8000fa8:	cccccccd 	.word	0xcccccccd
 8000fac:	08003ca4 	.word	0x08003ca4
 8000fb0:	08003cac 	.word	0x08003cac
 8000fb4:	08003cb4 	.word	0x08003cb4
 8000fb8:	08003cc0 	.word	0x08003cc0
 8000fbc:	08003cc8 	.word	0x08003cc8

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b092      	sub	sp, #72	; 0x48
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2234      	movs	r2, #52	; 0x34
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fa42 	bl	8003458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <SystemClock_Config+0x98>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <SystemClock_Config+0x98>)
 8000fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001002:	2300      	movs	r3, #0
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001006:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800100c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fa20 	bl	800245c <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001022:	f000 f81b 	bl	800105c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2303      	movs	r3, #3
 800102c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fd3c 	bl	8002abc <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800104a:	f000 f807 	bl	800105c <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3748      	adds	r7, #72	; 0x48
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40007000 	.word	0x40007000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001062:	e7fe      	b.n	8001062 <Error_Handler+0x6>

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_MspInit+0x5c>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <HAL_MspInit+0x5c>)
 8001070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001074:	6253      	str	r3, [r2, #36]	; 0x24
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_MspInit+0x5c>)
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_MspInit+0x5c>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_MspInit+0x5c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_MspInit+0x5c>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x5c>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x5c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6253      	str	r3, [r2, #36]	; 0x24
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x5c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f000 fa74 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f95b 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f002 f95e 	bl	8003404 <__errno>
 8001148:	4602      	mov	r2, r0
 800114a:	230c      	movs	r3, #12
 800114c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20014000 	.word	0x20014000
 8001174:	00000400 	.word	0x00000400
 8001178:	20000094 	.word	0x20000094
 800117c:	20000148 	.word	0x20000148

08001180 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <SystemInit+0x14>)
 8001186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118a:	609a      	str	r2, [r3, #8]
#endif
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <DWT_Delay_Init>:

#include "timer.h"
#include "stm32l1xx_hal.h"

uint32_t DWT_Delay_Init(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <DWT_Delay_Init+0x58>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <DWT_Delay_Init+0x58>)
 80011a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <DWT_Delay_Init+0x58>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <DWT_Delay_Init+0x58>)
 80011ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <DWT_Delay_Init+0x5c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <DWT_Delay_Init+0x5c>)
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <DWT_Delay_Init+0x5c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <DWT_Delay_Init+0x5c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <DWT_Delay_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80011d2:	bf00      	nop
    __ASM volatile ("NOP");
 80011d4:	bf00      	nop
    __ASM volatile ("NOP");
 80011d6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <DWT_Delay_Init+0x5c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80011e0:	2300      	movs	r3, #0
 80011e2:	e000      	b.n	80011e6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80011e4:	2301      	movs	r3, #1
    }
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000edf0 	.word	0xe000edf0
 80011f4:	e0001000 	.word	0xe0001000

080011f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART2_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x4c>)
 8001230:	f001 fed4 	bl	8002fdc <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f7ff ff0f 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000fc 	.word	0x200000fc
 8001248:	40004400 	.word	0x40004400

0800124c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_UART_MspInit+0x7c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d127      	bne.n	80012be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_UART_MspInit+0x80>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <HAL_UART_MspInit+0x80>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	6253      	str	r3, [r2, #36]	; 0x24
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_UART_MspInit+0x80>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_UART_MspInit+0x80>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_UART_MspInit+0x80>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_UART_MspInit+0x80>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800129e:	230c      	movs	r3, #12
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ae:	2307      	movs	r3, #7
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_UART_MspInit+0x84>)
 80012ba:	f000 f9a5 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40004400 	.word	0x40004400
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000

080012d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012d6:	e003      	b.n	80012e0 <LoopCopyDataInit>

080012d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012de:	3104      	adds	r1, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012e8:	d3f6      	bcc.n	80012d8 <CopyDataInit>
  ldr r2, =_sbss
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012ec:	e002      	b.n	80012f4 <LoopFillZerobss>

080012ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012f0:	f842 3b04 	str.w	r3, [r2], #4

080012f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012f8:	d3f9      	bcc.n	80012ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012fa:	f7ff ff41 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f002 f887 	bl	8003410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001302:	f7ff fd2f 	bl	8000d64 <main>
  bx lr
 8001306:	4770      	bx	lr
  ldr r3, =_sidata
 8001308:	08003d34 	.word	0x08003d34
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001310:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001314:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001318:	20000144 	.word	0x20000144

0800131c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_IRQHandler>

0800131e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f939 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132e:	2000      	movs	r0, #0
 8001330:	f000 f80e 	bl	8001350 <HAL_InitTick>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	e001      	b.n	8001344 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001340:	f7ff fe90 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001344:	79fb      	ldrb	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_InitTick+0x68>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d022      	beq.n	80013aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_InitTick+0x6c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_InitTick+0x68>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001370:	fbb1 f3f3 	udiv	r3, r1, r3
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f938 	bl	80015ee <HAL_SYSTICK_Config>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d809      	bhi.n	800139e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138a:	2200      	movs	r2, #0
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	f04f 30ff 	mov.w	r0, #4294967295
 8001392:	f000 f910 	bl	80015b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_InitTick+0x70>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e007      	b.n	80013ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e004      	b.n	80013ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x20>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_IncTick+0x1c>)
 80013d4:	6013      	str	r3, [r2, #0]
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000013c 	.word	0x2000013c
 80013e4:	20000008 	.word	0x20000008

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	2000013c 	.word	0x2000013c

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff fff0 	bl	80013e8 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d004      	beq.n	8001420 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_Delay+0x40>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001420:	bf00      	nop
 8001422:	f7ff ffe1 	bl	80013e8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	d8f7      	bhi.n	8001422 <HAL_Delay+0x26>
  {
  }
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff90 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff49 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff5e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffb0 	bl	800155c <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800161e:	e160      	b.n	80018e2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8152 	beq.w	80018dc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d00b      	beq.n	8001658 <HAL_GPIO_Init+0x50>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d007      	beq.n	8001658 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164c:	2b11      	cmp	r3, #17
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b12      	cmp	r3, #18
 8001656:	d130      	bne.n	80016ba <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800168e:	2201      	movs	r2, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	091b      	lsrs	r3, r3, #4
 80016a4:	f003 0201 	and.w	r2, r3, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0xf2>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d123      	bne.n	8001742 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0203 	and.w	r2, r3, #3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80ac 	beq.w	80018dc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_GPIO_Init+0x2f4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a5c      	ldr	r2, [pc, #368]	; (80018fc <HAL_GPIO_Init+0x2f4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_GPIO_Init+0x2f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_GPIO_Init+0x2f8>)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_GPIO_Init+0x2fc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d025      	beq.n	8001814 <HAL_GPIO_Init+0x20c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x300>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d01f      	beq.n	8001810 <HAL_GPIO_Init+0x208>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4e      	ldr	r2, [pc, #312]	; (800190c <HAL_GPIO_Init+0x304>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d019      	beq.n	800180c <HAL_GPIO_Init+0x204>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <HAL_GPIO_Init+0x308>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d013      	beq.n	8001808 <HAL_GPIO_Init+0x200>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_GPIO_Init+0x30c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00d      	beq.n	8001804 <HAL_GPIO_Init+0x1fc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a4b      	ldr	r2, [pc, #300]	; (8001918 <HAL_GPIO_Init+0x310>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d007      	beq.n	8001800 <HAL_GPIO_Init+0x1f8>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a4a      	ldr	r2, [pc, #296]	; (800191c <HAL_GPIO_Init+0x314>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d101      	bne.n	80017fc <HAL_GPIO_Init+0x1f4>
 80017f8:	2306      	movs	r3, #6
 80017fa:	e00c      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 80017fc:	2307      	movs	r3, #7
 80017fe:	e00a      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 8001800:	2305      	movs	r3, #5
 8001802:	e008      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 8001804:	2304      	movs	r3, #4
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 8001808:	2303      	movs	r3, #3
 800180a:	e004      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 800180c:	2302      	movs	r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_GPIO_Init+0x20e>
 8001814:	2300      	movs	r3, #0
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	f002 0203 	and.w	r2, r2, #3
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	4093      	lsls	r3, r2
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001826:	4936      	ldr	r1, [pc, #216]	; (8001900 <HAL_GPIO_Init+0x2f8>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_GPIO_Init+0x318>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001858:	4a31      	ldr	r2, [pc, #196]	; (8001920 <HAL_GPIO_Init+0x318>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_GPIO_Init+0x318>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_GPIO_Init+0x318>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_GPIO_Init+0x318>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ac:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <HAL_GPIO_Init+0x318>)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x318>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_GPIO_Init+0x318>)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f47f ae97 	bne.w	8001620 <HAL_GPIO_Init+0x18>
  }
}
 80018f2:	bf00      	nop
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40023800 	.word	0x40023800
 8001900:	40010000 	.word	0x40010000
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40021400 	.word	0x40021400
 800191c:	40021800 	.word	0x40021800
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	807b      	strh	r3, [r7, #2]
 800195e:	4613      	mov	r3, r2
 8001960:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001962:	787b      	ldrb	r3, [r7, #1]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800196e:	e003      	b.n	8001978 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
	...

08001984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e11f      	b.n	8001bd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe ffee 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e8:	f001 fa70 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <HAL_I2C_Init+0x25c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d807      	bhi.n	8001a08 <HAL_I2C_Init+0x84>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <HAL_I2C_Init+0x260>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e006      	b.n	8001a16 <HAL_I2C_Init+0x92>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4a77      	ldr	r2, [pc, #476]	; (8001be8 <HAL_I2C_Init+0x264>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0db      	b.n	8001bd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a72      	ldr	r2, [pc, #456]	; (8001bec <HAL_I2C_Init+0x268>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a64      	ldr	r2, [pc, #400]	; (8001be0 <HAL_I2C_Init+0x25c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d802      	bhi.n	8001a58 <HAL_I2C_Init+0xd4>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3301      	adds	r3, #1
 8001a56:	e009      	b.n	8001a6c <HAL_I2C_Init+0xe8>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_I2C_Init+0x26c>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4956      	ldr	r1, [pc, #344]	; (8001be0 <HAL_I2C_Init+0x25c>)
 8001a88:	428b      	cmp	r3, r1
 8001a8a:	d80d      	bhi.n	8001aa8 <HAL_I2C_Init+0x124>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e59      	subs	r1, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	bf38      	it	cc
 8001aa4:	2304      	movcc	r3, #4
 8001aa6:	e04f      	b.n	8001b48 <HAL_I2C_Init+0x1c4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d111      	bne.n	8001ad4 <HAL_I2C_Init+0x150>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	440b      	add	r3, r1
 8001abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e012      	b.n	8001afa <HAL_I2C_Init+0x176>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1e58      	subs	r0, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	0099      	lsls	r1, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Init+0x17e>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e022      	b.n	8001b48 <HAL_I2C_Init+0x1c4>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10e      	bne.n	8001b28 <HAL_I2C_Init+0x1a4>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1e58      	subs	r0, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	440b      	add	r3, r1
 8001b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b26:	e00f      	b.n	8001b48 <HAL_I2C_Init+0x1c4>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	0099      	lsls	r1, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6809      	ldr	r1, [r1, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6911      	ldr	r1, [r2, #16]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68d2      	ldr	r2, [r2, #12]
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	000186a0 	.word	0x000186a0
 8001be4:	001e847f 	.word	0x001e847f
 8001be8:	003d08ff 	.word	0x003d08ff
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	460b      	mov	r3, r1
 8001c02:	817b      	strh	r3, [r7, #10]
 8001c04:	4613      	mov	r3, r2
 8001c06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff fbee 	bl	80013e8 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	f040 80e0 	bne.w	8001ddc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2319      	movs	r3, #25
 8001c22:	2201      	movs	r2, #1
 8001c24:	4970      	ldr	r1, [pc, #448]	; (8001de8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fa92 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	e0d3      	b.n	8001dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2C_Master_Transmit+0x50>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0cc      	b.n	8001dde <HAL_I2C_Master_Transmit+0x1ea>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d007      	beq.n	8001c6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2221      	movs	r2, #33	; 0x21
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2210      	movs	r2, #16
 8001c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	893a      	ldrh	r2, [r7, #8]
 8001c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a50      	ldr	r2, [pc, #320]	; (8001dec <HAL_I2C_Master_Transmit+0x1f8>)
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cac:	8979      	ldrh	r1, [r7, #10]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f9ca 	bl	800204c <I2C_MasterRequestWrite>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e08d      	b.n	8001dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cd8:	e066      	b.n	8001da8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fb0c 	bl	80022fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d107      	bne.n	8001d02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06b      	b.n	8001dde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d11b      	bne.n	8001d7c <HAL_I2C_Master_Transmit+0x188>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d017      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fafc 	bl	800237e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00d      	beq.n	8001da8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d107      	bne.n	8001da4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e01a      	b.n	8001dde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d194      	bne.n	8001cda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	00100002 	.word	0x00100002
 8001dec:	ffff0000 	.word	0xffff0000

08001df0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff faf2 	bl	80013e8 <HAL_GetTick>
 8001e04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	f040 8111 	bne.w	800203a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4988      	ldr	r1, [pc, #544]	; (8002044 <HAL_I2C_IsDeviceReady+0x254>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f994 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e104      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2C_IsDeviceReady+0x50>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0fd      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d007      	beq.n	8001e66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2224      	movs	r2, #36	; 0x24
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a70      	ldr	r2, [pc, #448]	; (8002048 <HAL_I2C_IsDeviceReady+0x258>)
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f952 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec0:	d103      	bne.n	8001eca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0b6      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ece:	897b      	ldrh	r3, [r7, #10]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001edc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fa83 	bl	80013e8 <HAL_GetTick>
 8001ee2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f12:	e025      	b.n	8001f60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f14:	f7ff fa68 	bl	80013e8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d302      	bcc.n	8001f2a <HAL_I2C_IsDeviceReady+0x13a>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	22a0      	movs	r2, #160	; 0xa0
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2ba0      	cmp	r3, #160	; 0xa0
 8001f6a:	d005      	beq.n	8001f78 <HAL_I2C_IsDeviceReady+0x188>
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_I2C_IsDeviceReady+0x188>
 8001f72:	7dbb      	ldrb	r3, [r7, #22]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0cd      	beq.n	8001f14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d129      	bne.n	8001fe2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2319      	movs	r3, #25
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4921      	ldr	r1, [pc, #132]	; (8002044 <HAL_I2C_IsDeviceReady+0x254>)
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f8c6 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e036      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e02c      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ffa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2319      	movs	r3, #25
 8002002:	2201      	movs	r2, #1
 8002004:	490f      	ldr	r1, [pc, #60]	; (8002044 <HAL_I2C_IsDeviceReady+0x254>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f8a2 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e012      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	3301      	adds	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	f4ff af32 	bcc.w	8001e8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	00100002 	.word	0x00100002
 8002048:	ffff0000 	.word	0xffff0000

0800204c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d006      	beq.n	8002076 <I2C_MasterRequestWrite+0x2a>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d003      	beq.n	8002076 <I2C_MasterRequestWrite+0x2a>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002074:	d108      	bne.n	8002088 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e00b      	b.n	80020a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	2b12      	cmp	r3, #18
 800208e:	d107      	bne.n	80020a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f84f 	bl	8002150 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00d      	beq.n	80020d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c6:	d103      	bne.n	80020d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e035      	b.n	8002140 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020dc:	d108      	bne.n	80020f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	e01b      	b.n	8002128 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020f0:	897b      	ldrh	r3, [r7, #10]
 80020f2:	11db      	asrs	r3, r3, #7
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f003 0306 	and.w	r3, r3, #6
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f063 030f 	orn	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	490e      	ldr	r1, [pc, #56]	; (8002148 <I2C_MasterRequestWrite+0xfc>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f875 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e010      	b.n	8002140 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <I2C_MasterRequestWrite+0x100>)
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f865 	bl	80021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	00010008 	.word	0x00010008
 800214c:	00010002 	.word	0x00010002

08002150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	e025      	b.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d021      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800216a:	f7ff f93d 	bl	80013e8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x30>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d116      	bne.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f043 0220 	orr.w	r2, r3, #32
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e023      	b.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10d      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	e00c      	b.n	80021ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4013      	ands	r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d0b6      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220c:	e051      	b.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221c:	d123      	bne.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002236:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e046      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d021      	beq.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226e:	f7ff f8bb 	bl	80013e8 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	d302      	bcc.n	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d116      	bne.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f043 0220 	orr.w	r2, r3, #32
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e020      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10c      	bne.n	80022d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	e00b      	b.n	80022ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	43da      	mvns	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4013      	ands	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d18d      	bne.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002308:	e02d      	b.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f878 	bl	8002400 <I2C_IsAcknowledgeFailed>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e02d      	b.n	8002376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d021      	beq.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002322:	f7ff f861 	bl	80013e8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	429a      	cmp	r2, r3
 8002330:	d302      	bcc.n	8002338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d116      	bne.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f043 0220 	orr.w	r2, r3, #32
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e007      	b.n	8002376 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d1ca      	bne.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800238a:	e02d      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f837 	bl	8002400 <I2C_IsAcknowledgeFailed>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e02d      	b.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a2:	d021      	beq.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a4:	f7ff f820 	bl	80013e8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d302      	bcc.n	80023ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d116      	bne.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e007      	b.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d1ca      	bne.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002416:	d11b      	bne.n	8002450 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002420:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f043 0204 	orr.w	r2, r3, #4
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e31d      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246e:	4b94      	ldr	r3, [pc, #592]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	4b91      	ldr	r3, [pc, #580]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002480:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d07b      	beq.n	8002586 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d006      	beq.n	80024a2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d10f      	bne.n	80024ba <HAL_RCC_OscConfig+0x5e>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d10b      	bne.n	80024ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a2:	4b87      	ldr	r3, [pc, #540]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d06a      	beq.n	8002584 <HAL_RCC_OscConfig+0x128>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d166      	bne.n	8002584 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e2f7      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x74>
 80024c2:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7e      	ldr	r2, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e02d      	b.n	800252c <HAL_RCC_OscConfig+0xd0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x96>
 80024d8:	4b79      	ldr	r3, [pc, #484]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a78      	ldr	r2, [pc, #480]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0xd0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0xb8>
 80024fa:	4b71      	ldr	r3, [pc, #452]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a70      	ldr	r2, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b6e      	ldr	r3, [pc, #440]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6d      	ldr	r2, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xd0>
 8002514:	4b6a      	ldr	r3, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a69      	ldr	r2, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b67      	ldr	r3, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a66      	ldr	r2, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe ff58 	bl	80013e8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe ff54 	bl	80013e8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e2ad      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xe0>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe ff44 	bl	80013e8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe ff40 	bl	80013e8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e299      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002576:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x108>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d05a      	beq.n	8002648 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d119      	bne.n	80025d2 <HAL_RCC_OscConfig+0x176>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d116      	bne.n	80025d2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a4:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x160>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e276      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	493d      	ldr	r1, [pc, #244]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d0:	e03a      	b.n	8002648 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCC_OscConfig+0x268>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe ff02 	bl	80013e8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e8:	f7fe fefe 	bl	80013e8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e257      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	492a      	ldr	r1, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e015      	b.n	8002648 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261c:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_RCC_OscConfig+0x268>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fee1 	bl	80013e8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7fe fedd 	bl	80013e8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e236      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80b8 	beq.w	80027c6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d170      	bne.n	800273e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_OscConfig+0x218>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e21a      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1a      	ldr	r2, [r3, #32]
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002680:	429a      	cmp	r2, r3
 8002682:	d921      	bls.n	80026c8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fc47 	bl	8002f1c <RCC_SetFlashLatencyFromMSIRange>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e208      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4906      	ldr	r1, [pc, #24]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	4901      	ldr	r1, [pc, #4]	; (80026c0 <HAL_RCC_OscConfig+0x264>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
 80026be:	e020      	b.n	8002702 <HAL_RCC_OscConfig+0x2a6>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c8:	4ba4      	ldr	r3, [pc, #656]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	49a1      	ldr	r1, [pc, #644]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026da:	4ba0      	ldr	r3, [pc, #640]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	499c      	ldr	r1, [pc, #624]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fc12 	bl	8002f1c <RCC_SetFlashLatencyFromMSIRange>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1d3      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	3301      	adds	r3, #1
 800270a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002712:	4a92      	ldr	r2, [pc, #584]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	0912      	lsrs	r2, r2, #4
 8002718:	f002 020f 	and.w	r2, r2, #15
 800271c:	4990      	ldr	r1, [pc, #576]	; (8002960 <HAL_RCC_OscConfig+0x504>)
 800271e:	5c8a      	ldrb	r2, [r1, r2]
 8002720:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002722:	4a90      	ldr	r2, [pc, #576]	; (8002964 <HAL_RCC_OscConfig+0x508>)
 8002724:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002726:	4b90      	ldr	r3, [pc, #576]	; (8002968 <HAL_RCC_OscConfig+0x50c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fe10 	bl	8001350 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d045      	beq.n	80027c6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	e1b5      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d029      	beq.n	800279a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <HAL_RCC_OscConfig+0x510>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fe4c 	bl	80013e8 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002754:	f7fe fe48 	bl	80013e8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1a1      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4977      	ldr	r1, [pc, #476]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002784:	4b75      	ldr	r3, [pc, #468]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	4972      	ldr	r1, [pc, #456]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <HAL_RCC_OscConfig+0x510>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fe22 	bl	80013e8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7fe fe1e 	bl	80013e8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e177      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027ba:	4b68      	ldr	r3, [pc, #416]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d030      	beq.n	8002834 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <HAL_RCC_OscConfig+0x514>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fe02 	bl	80013e8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe fdfe 	bl	80013e8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e157      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x38c>
 8002806:	e015      	b.n	8002834 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_OscConfig+0x514>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe fdeb 	bl	80013e8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe fde7 	bl	80013e8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e140      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <HAL_RCC_OscConfig+0x500>)
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80b5 	beq.w	80029ac <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b45      	ldr	r3, [pc, #276]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10d      	bne.n	800286e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	4a41      	ldr	r2, [pc, #260]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6253      	str	r3, [r2, #36]	; 0x24
 800285e:	4b3f      	ldr	r3, [pc, #252]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x518>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_OscConfig+0x518>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3d      	ldr	r2, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x518>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fe fdaf 	bl	80013e8 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fdab 	bl	80013e8 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e104      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_RCC_OscConfig+0x518>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x466>
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6353      	str	r3, [r2, #52]	; 0x34
 80028c0:	e02d      	b.n	800291e <HAL_RCC_OscConfig+0x4c2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x488>
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	6353      	str	r3, [r2, #52]	; 0x34
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e0:	6353      	str	r3, [r2, #52]	; 0x34
 80028e2:	e01c      	b.n	800291e <HAL_RCC_OscConfig+0x4c2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x4aa>
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f6:	6353      	str	r3, [r2, #52]	; 0x34
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_RCC_OscConfig+0x500>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	6353      	str	r3, [r2, #52]	; 0x34
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x4c2>
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_RCC_OscConfig+0x500>)
 800290c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002910:	6353      	str	r3, [r2, #52]	; 0x34
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800291c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe fd5f 	bl	80013e8 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fd5b 	bl	80013e8 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0b2      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_OscConfig+0x500>)
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCC_OscConfig+0x4d2>
 8002950:	e023      	b.n	800299a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe fd49 	bl	80013e8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002958:	e019      	b.n	800298e <HAL_RCC_OscConfig+0x532>
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	08003cd8 	.word	0x08003cd8
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004
 800296c:	42470020 	.word	0x42470020
 8002970:	42470680 	.word	0x42470680
 8002974:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fd36 	bl	80013e8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e08d      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800298e:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800299a:	7ffb      	ldrb	r3, [r7, #31]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	4a43      	ldr	r2, [pc, #268]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d079      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d056      	beq.n	8002a68 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d13b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x65c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fd0e 	bl	80013e8 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fd0a 	bl	80013e8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e063      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	4319      	orrs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	430b      	orrs	r3, r1
 8002a06:	492b      	ldr	r1, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_RCC_OscConfig+0x65c>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fce9 	bl	80013e8 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fce5 	bl	80013e8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e03e      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x5be>
 8002a38:	e036      	b.n	8002aa8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x65c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fcd2 	bl	80013e8 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fcce 	bl	80013e8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e027      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x5ec>
 8002a66:	e01f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e01a      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCC_OscConfig+0x658>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470060 	.word	0x42470060

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e11a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d919      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x34>
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a89      	ldr	r2, [pc, #548]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0201 	bic.w	r2, r3, #1
 8002af8:	4985      	ldr	r1, [pc, #532]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0f9      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1e:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	497a      	ldr	r1, [pc, #488]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 808e 	beq.w	8002c5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d121      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0d7      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d115      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0cb      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0bf      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b86:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0b7      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	495c      	ldr	r1, [pc, #368]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fc1e 	bl	80013e8 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe fc16 	bl	80013e8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e09b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bce:	4b51      	ldr	r3, [pc, #324]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d1ee      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xfc>
 8002bda:	e03e      	b.n	8002c5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be6:	f7fe fbff 	bl	80013e8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e084      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b0c      	cmp	r3, #12
 8002c06:	d1ee      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x12a>
 8002c08:	e027      	b.n	8002c5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d11d      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fbe8 	bl	80013e8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e06d      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2a:	4b3a      	ldr	r3, [pc, #232]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d1ee      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x158>
 8002c36:	e010      	b.n	8002c5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe fbd6 	bl	80013e8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e05b      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ee      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d219      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_ClockConfig+0x1be>
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	4923      	ldr	r1, [pc, #140]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_RCC_ClockConfig+0x254>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e034      	b.n	8002d06 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4917      	ldr	r1, [pc, #92]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	490f      	ldr	r1, [pc, #60]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cda:	f000 f823 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002cde:	4601      	mov	r1, r0
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_RCC_ClockConfig+0x258>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	fa21 f303 	lsr.w	r3, r1, r3
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x264>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fb28 	bl	8001350 <HAL_InitTick>
 8002d00:	4603      	mov	r3, r0
 8002d02:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d04:	7afb      	ldrb	r3, [r7, #11]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023c00 	.word	0x40023c00
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08003cd8 	.word	0x08003cd8
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d007      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x26>
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x2c>
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	f040 809f 	bne.w	8002e82 <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_GetSysClockFreq+0x188>)
 8002d46:	613b      	str	r3, [r7, #16]
      break;
 8002d48:	e0a9      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4a:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002d4c:	613b      	str	r3, [r7, #16]
      break;
 8002d4e:	e0a6      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x190>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	0d9b      	lsrs	r3, r3, #22
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d041      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	461d      	mov	r5, r3
 8002d7a:	f04f 0600 	mov.w	r6, #0
 8002d7e:	4629      	mov	r1, r5
 8002d80:	4632      	mov	r2, r6
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	f04f 0400 	mov.w	r4, #0
 8002d8a:	0154      	lsls	r4, r2, #5
 8002d8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d90:	014b      	lsls	r3, r1, #5
 8002d92:	4619      	mov	r1, r3
 8002d94:	4622      	mov	r2, r4
 8002d96:	1b49      	subs	r1, r1, r5
 8002d98:	eb62 0206 	sbc.w	r2, r2, r6
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	0194      	lsls	r4, r2, #6
 8002da6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002daa:	018b      	lsls	r3, r1, #6
 8002dac:	1a5b      	subs	r3, r3, r1
 8002dae:	eb64 0402 	sbc.w	r4, r4, r2
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	00e2      	lsls	r2, r4, #3
 8002dbc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dc0:	00d9      	lsls	r1, r3, #3
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	195b      	adds	r3, r3, r5
 8002dc8:	eb44 0406 	adc.w	r4, r4, r6
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	0262      	lsls	r2, r4, #9
 8002dd6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002dda:	0259      	lsls	r1, r3, #9
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	4621      	mov	r1, r4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f04f 0400 	mov.w	r4, #0
 8002dea:	461a      	mov	r2, r3
 8002dec:	4623      	mov	r3, r4
 8002dee:	f7fd faf3 	bl	80003d8 <__aeabi_uldivmod>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e040      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	f04f 0600 	mov.w	r6, #0
 8002e02:	4629      	mov	r1, r5
 8002e04:	4632      	mov	r2, r6
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	0154      	lsls	r4, r2, #5
 8002e10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e14:	014b      	lsls	r3, r1, #5
 8002e16:	4619      	mov	r1, r3
 8002e18:	4622      	mov	r2, r4
 8002e1a:	1b49      	subs	r1, r1, r5
 8002e1c:	eb62 0206 	sbc.w	r2, r2, r6
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	f04f 0400 	mov.w	r4, #0
 8002e28:	0194      	lsls	r4, r2, #6
 8002e2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	1a5b      	subs	r3, r3, r1
 8002e32:	eb64 0402 	sbc.w	r4, r4, r2
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	00e2      	lsls	r2, r4, #3
 8002e40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e44:	00d9      	lsls	r1, r3, #3
 8002e46:	460b      	mov	r3, r1
 8002e48:	4614      	mov	r4, r2
 8002e4a:	195b      	adds	r3, r3, r5
 8002e4c:	eb44 0406 	adc.w	r4, r4, r6
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	02a2      	lsls	r2, r4, #10
 8002e5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e5e:	0299      	lsls	r1, r3, #10
 8002e60:	460b      	mov	r3, r1
 8002e62:	4614      	mov	r4, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	4621      	mov	r1, r4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f04f 0400 	mov.w	r4, #0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	4623      	mov	r3, r4
 8002e72:	f7fd fab1 	bl	80003d8 <__aeabi_uldivmod>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	e00d      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0b5b      	lsrs	r3, r3, #13
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	613b      	str	r3, [r7, #16]
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	693b      	ldr	r3, [r7, #16]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	007a1200 	.word	0x007a1200
 8002eb4:	08003ccc 	.word	0x08003ccc

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff2 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08003ce8 	.word	0x08003ce8

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffde 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0adb      	lsrs	r3, r3, #11
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08003ce8 	.word	0x08003ce8

08002f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12c      	bne.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f34:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002f40:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e016      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6253      	str	r3, [r2, #36]	; 0x24
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002f6c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f80:	d105      	bne.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f88:	d101      	bne.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 0201 	bic.w	r2, r3, #1
 8002fa8:	490b      	ldr	r1, [pc, #44]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e03f      	b.n	800306e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe f922 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800301e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f90b 	bl	800323c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003034:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003044:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003054:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b088      	sub	sp, #32
 800307a:	af02      	add	r7, sp, #8
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b20      	cmp	r3, #32
 8003094:	f040 8083 	bne.w	800319e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_Transmit+0x2e>
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e07b      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Transmit+0x40>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e074      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2221      	movs	r2, #33	; 0x21
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030cc:	f7fe f98c 	bl	80013e8 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80030e6:	e042      	b.n	800316e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d122      	bne.n	8003146 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f84c 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e042      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3302      	adds	r3, #2
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	e017      	b.n	800316e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3301      	adds	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	e013      	b.n	800316e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f829 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e01f      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	60ba      	str	r2, [r7, #8]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1b7      	bne.n	80030e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f810 	bl	80031a8 <UART_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e006      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800319e:	2302      	movs	r3, #2
  }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b8:	e02c      	b.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d028      	beq.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031c8:	f7fe f90e 	bl	80013e8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d21d      	bcs.n	8003214 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e00f      	b.n	8003234 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	429a      	cmp	r2, r3
 8003230:	d0c3      	beq.n	80031ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4313      	orrs	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800327c:	f023 030c 	bic.w	r3, r3, #12
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	430b      	orrs	r3, r1
 8003288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a55      	ldr	r2, [pc, #340]	; (80033fc <UART_SetConfig+0x1c0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d103      	bne.n	80032b2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032aa:	f7ff fe23 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	e002      	b.n	80032b8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032b2:	f7ff fe0b 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 80032b6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d14c      	bne.n	800335c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	4a49      	ldr	r2, [pc, #292]	; (8003400 <UART_SetConfig+0x1c4>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	0119      	lsls	r1, r3, #4
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4b41      	ldr	r3, [pc, #260]	; (8003400 <UART_SetConfig+0x1c4>)
 80032fa:	fba3 0302 	umull	r0, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a3c      	ldr	r2, [pc, #240]	; (8003400 <UART_SetConfig+0x1c4>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800331a:	4419      	add	r1, r3
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	009a      	lsls	r2, r3, #2
 8003326:	441a      	add	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <UART_SetConfig+0x1c4>)
 8003334:	fba3 0302 	umull	r0, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2064      	movs	r0, #100	; 0x64
 800333c:	fb00 f303 	mul.w	r3, r0, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3332      	adds	r3, #50	; 0x32
 8003346:	4a2e      	ldr	r2, [pc, #184]	; (8003400 <UART_SetConfig+0x1c4>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	f003 0207 	and.w	r2, r3, #7
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	440a      	add	r2, r1
 8003358:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800335a:	e04a      	b.n	80033f2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009a      	lsls	r2, r3, #2
 8003366:	441a      	add	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	4a23      	ldr	r2, [pc, #140]	; (8003400 <UART_SetConfig+0x1c4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	0119      	lsls	r1, r3, #4
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009a      	lsls	r2, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <UART_SetConfig+0x1c4>)
 8003394:	fba3 0302 	umull	r0, r3, r3, r2
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	2064      	movs	r0, #100	; 0x64
 800339c:	fb00 f303 	mul.w	r3, r0, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	3332      	adds	r3, #50	; 0x32
 80033a6:	4a16      	ldr	r2, [pc, #88]	; (8003400 <UART_SetConfig+0x1c4>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b2:	4419      	add	r1, r3
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	009a      	lsls	r2, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <UART_SetConfig+0x1c4>)
 80033cc:	fba3 0302 	umull	r0, r3, r3, r2
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	2064      	movs	r0, #100	; 0x64
 80033d4:	fb00 f303 	mul.w	r3, r0, r3
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	3332      	adds	r3, #50	; 0x32
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <UART_SetConfig+0x1c4>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	440a      	add	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40013800 	.word	0x40013800
 8003400:	51eb851f 	.word	0x51eb851f

08003404 <__errno>:
 8003404:	4b01      	ldr	r3, [pc, #4]	; (800340c <__errno+0x8>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	2000000c 	.word	0x2000000c

08003410 <__libc_init_array>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	2500      	movs	r5, #0
 8003414:	4e0c      	ldr	r6, [pc, #48]	; (8003448 <__libc_init_array+0x38>)
 8003416:	4c0d      	ldr	r4, [pc, #52]	; (800344c <__libc_init_array+0x3c>)
 8003418:	1ba4      	subs	r4, r4, r6
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	42a5      	cmp	r5, r4
 800341e:	d109      	bne.n	8003434 <__libc_init_array+0x24>
 8003420:	f000 fc34 	bl	8003c8c <_init>
 8003424:	2500      	movs	r5, #0
 8003426:	4e0a      	ldr	r6, [pc, #40]	; (8003450 <__libc_init_array+0x40>)
 8003428:	4c0a      	ldr	r4, [pc, #40]	; (8003454 <__libc_init_array+0x44>)
 800342a:	1ba4      	subs	r4, r4, r6
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	42a5      	cmp	r5, r4
 8003430:	d105      	bne.n	800343e <__libc_init_array+0x2e>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003438:	4798      	blx	r3
 800343a:	3501      	adds	r5, #1
 800343c:	e7ee      	b.n	800341c <__libc_init_array+0xc>
 800343e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003442:	4798      	blx	r3
 8003444:	3501      	adds	r5, #1
 8003446:	e7f2      	b.n	800342e <__libc_init_array+0x1e>
 8003448:	08003d2c 	.word	0x08003d2c
 800344c:	08003d2c 	.word	0x08003d2c
 8003450:	08003d2c 	.word	0x08003d2c
 8003454:	08003d30 	.word	0x08003d30

08003458 <memset>:
 8003458:	4603      	mov	r3, r0
 800345a:	4402      	add	r2, r0
 800345c:	4293      	cmp	r3, r2
 800345e:	d100      	bne.n	8003462 <memset+0xa>
 8003460:	4770      	bx	lr
 8003462:	f803 1b01 	strb.w	r1, [r3], #1
 8003466:	e7f9      	b.n	800345c <memset+0x4>

08003468 <siprintf>:
 8003468:	b40e      	push	{r1, r2, r3}
 800346a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800346e:	b500      	push	{lr}
 8003470:	b09c      	sub	sp, #112	; 0x70
 8003472:	ab1d      	add	r3, sp, #116	; 0x74
 8003474:	9002      	str	r0, [sp, #8]
 8003476:	9006      	str	r0, [sp, #24]
 8003478:	9107      	str	r1, [sp, #28]
 800347a:	9104      	str	r1, [sp, #16]
 800347c:	4808      	ldr	r0, [pc, #32]	; (80034a0 <siprintf+0x38>)
 800347e:	4909      	ldr	r1, [pc, #36]	; (80034a4 <siprintf+0x3c>)
 8003480:	f853 2b04 	ldr.w	r2, [r3], #4
 8003484:	9105      	str	r1, [sp, #20]
 8003486:	6800      	ldr	r0, [r0, #0]
 8003488:	a902      	add	r1, sp, #8
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	f000 f866 	bl	800355c <_svfiprintf_r>
 8003490:	2200      	movs	r2, #0
 8003492:	9b02      	ldr	r3, [sp, #8]
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	b01c      	add	sp, #112	; 0x70
 8003498:	f85d eb04 	ldr.w	lr, [sp], #4
 800349c:	b003      	add	sp, #12
 800349e:	4770      	bx	lr
 80034a0:	2000000c 	.word	0x2000000c
 80034a4:	ffff0208 	.word	0xffff0208

080034a8 <__ssputs_r>:
 80034a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ac:	688e      	ldr	r6, [r1, #8]
 80034ae:	4682      	mov	sl, r0
 80034b0:	429e      	cmp	r6, r3
 80034b2:	460c      	mov	r4, r1
 80034b4:	4690      	mov	r8, r2
 80034b6:	4699      	mov	r9, r3
 80034b8:	d837      	bhi.n	800352a <__ssputs_r+0x82>
 80034ba:	898a      	ldrh	r2, [r1, #12]
 80034bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034c0:	d031      	beq.n	8003526 <__ssputs_r+0x7e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	6825      	ldr	r5, [r4, #0]
 80034c6:	6909      	ldr	r1, [r1, #16]
 80034c8:	1a6f      	subs	r7, r5, r1
 80034ca:	6965      	ldr	r5, [r4, #20]
 80034cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80034d4:	f109 0301 	add.w	r3, r9, #1
 80034d8:	443b      	add	r3, r7
 80034da:	429d      	cmp	r5, r3
 80034dc:	bf38      	it	cc
 80034de:	461d      	movcc	r5, r3
 80034e0:	0553      	lsls	r3, r2, #21
 80034e2:	d530      	bpl.n	8003546 <__ssputs_r+0x9e>
 80034e4:	4629      	mov	r1, r5
 80034e6:	f000 fb37 	bl	8003b58 <_malloc_r>
 80034ea:	4606      	mov	r6, r0
 80034ec:	b950      	cbnz	r0, 8003504 <__ssputs_r+0x5c>
 80034ee:	230c      	movs	r3, #12
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f8ca 3000 	str.w	r3, [sl]
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034fe:	81a3      	strh	r3, [r4, #12]
 8003500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003504:	463a      	mov	r2, r7
 8003506:	6921      	ldr	r1, [r4, #16]
 8003508:	f000 fab6 	bl	8003a78 <memcpy>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003516:	81a3      	strh	r3, [r4, #12]
 8003518:	6126      	str	r6, [r4, #16]
 800351a:	443e      	add	r6, r7
 800351c:	6026      	str	r6, [r4, #0]
 800351e:	464e      	mov	r6, r9
 8003520:	6165      	str	r5, [r4, #20]
 8003522:	1bed      	subs	r5, r5, r7
 8003524:	60a5      	str	r5, [r4, #8]
 8003526:	454e      	cmp	r6, r9
 8003528:	d900      	bls.n	800352c <__ssputs_r+0x84>
 800352a:	464e      	mov	r6, r9
 800352c:	4632      	mov	r2, r6
 800352e:	4641      	mov	r1, r8
 8003530:	6820      	ldr	r0, [r4, #0]
 8003532:	f000 faac 	bl	8003a8e <memmove>
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	2000      	movs	r0, #0
 800353a:	1b9b      	subs	r3, r3, r6
 800353c:	60a3      	str	r3, [r4, #8]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	441e      	add	r6, r3
 8003542:	6026      	str	r6, [r4, #0]
 8003544:	e7dc      	b.n	8003500 <__ssputs_r+0x58>
 8003546:	462a      	mov	r2, r5
 8003548:	f000 fb60 	bl	8003c0c <_realloc_r>
 800354c:	4606      	mov	r6, r0
 800354e:	2800      	cmp	r0, #0
 8003550:	d1e2      	bne.n	8003518 <__ssputs_r+0x70>
 8003552:	6921      	ldr	r1, [r4, #16]
 8003554:	4650      	mov	r0, sl
 8003556:	f000 fab3 	bl	8003ac0 <_free_r>
 800355a:	e7c8      	b.n	80034ee <__ssputs_r+0x46>

0800355c <_svfiprintf_r>:
 800355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003560:	461d      	mov	r5, r3
 8003562:	898b      	ldrh	r3, [r1, #12]
 8003564:	b09d      	sub	sp, #116	; 0x74
 8003566:	061f      	lsls	r7, r3, #24
 8003568:	4680      	mov	r8, r0
 800356a:	460c      	mov	r4, r1
 800356c:	4616      	mov	r6, r2
 800356e:	d50f      	bpl.n	8003590 <_svfiprintf_r+0x34>
 8003570:	690b      	ldr	r3, [r1, #16]
 8003572:	b96b      	cbnz	r3, 8003590 <_svfiprintf_r+0x34>
 8003574:	2140      	movs	r1, #64	; 0x40
 8003576:	f000 faef 	bl	8003b58 <_malloc_r>
 800357a:	6020      	str	r0, [r4, #0]
 800357c:	6120      	str	r0, [r4, #16]
 800357e:	b928      	cbnz	r0, 800358c <_svfiprintf_r+0x30>
 8003580:	230c      	movs	r3, #12
 8003582:	f8c8 3000 	str.w	r3, [r8]
 8003586:	f04f 30ff 	mov.w	r0, #4294967295
 800358a:	e0c8      	b.n	800371e <_svfiprintf_r+0x1c2>
 800358c:	2340      	movs	r3, #64	; 0x40
 800358e:	6163      	str	r3, [r4, #20]
 8003590:	2300      	movs	r3, #0
 8003592:	9309      	str	r3, [sp, #36]	; 0x24
 8003594:	2320      	movs	r3, #32
 8003596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800359a:	2330      	movs	r3, #48	; 0x30
 800359c:	f04f 0b01 	mov.w	fp, #1
 80035a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035a4:	9503      	str	r5, [sp, #12]
 80035a6:	4637      	mov	r7, r6
 80035a8:	463d      	mov	r5, r7
 80035aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035ae:	b10b      	cbz	r3, 80035b4 <_svfiprintf_r+0x58>
 80035b0:	2b25      	cmp	r3, #37	; 0x25
 80035b2:	d13e      	bne.n	8003632 <_svfiprintf_r+0xd6>
 80035b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80035b8:	d00b      	beq.n	80035d2 <_svfiprintf_r+0x76>
 80035ba:	4653      	mov	r3, sl
 80035bc:	4632      	mov	r2, r6
 80035be:	4621      	mov	r1, r4
 80035c0:	4640      	mov	r0, r8
 80035c2:	f7ff ff71 	bl	80034a8 <__ssputs_r>
 80035c6:	3001      	adds	r0, #1
 80035c8:	f000 80a4 	beq.w	8003714 <_svfiprintf_r+0x1b8>
 80035cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ce:	4453      	add	r3, sl
 80035d0:	9309      	str	r3, [sp, #36]	; 0x24
 80035d2:	783b      	ldrb	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 809d 	beq.w	8003714 <_svfiprintf_r+0x1b8>
 80035da:	2300      	movs	r3, #0
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295
 80035e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035e4:	9304      	str	r3, [sp, #16]
 80035e6:	9307      	str	r3, [sp, #28]
 80035e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ec:	931a      	str	r3, [sp, #104]	; 0x68
 80035ee:	462f      	mov	r7, r5
 80035f0:	2205      	movs	r2, #5
 80035f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80035f6:	4850      	ldr	r0, [pc, #320]	; (8003738 <_svfiprintf_r+0x1dc>)
 80035f8:	f000 fa30 	bl	8003a5c <memchr>
 80035fc:	9b04      	ldr	r3, [sp, #16]
 80035fe:	b9d0      	cbnz	r0, 8003636 <_svfiprintf_r+0xda>
 8003600:	06d9      	lsls	r1, r3, #27
 8003602:	bf44      	itt	mi
 8003604:	2220      	movmi	r2, #32
 8003606:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800360a:	071a      	lsls	r2, r3, #28
 800360c:	bf44      	itt	mi
 800360e:	222b      	movmi	r2, #43	; 0x2b
 8003610:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003614:	782a      	ldrb	r2, [r5, #0]
 8003616:	2a2a      	cmp	r2, #42	; 0x2a
 8003618:	d015      	beq.n	8003646 <_svfiprintf_r+0xea>
 800361a:	462f      	mov	r7, r5
 800361c:	2000      	movs	r0, #0
 800361e:	250a      	movs	r5, #10
 8003620:	9a07      	ldr	r2, [sp, #28]
 8003622:	4639      	mov	r1, r7
 8003624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003628:	3b30      	subs	r3, #48	; 0x30
 800362a:	2b09      	cmp	r3, #9
 800362c:	d94d      	bls.n	80036ca <_svfiprintf_r+0x16e>
 800362e:	b1b8      	cbz	r0, 8003660 <_svfiprintf_r+0x104>
 8003630:	e00f      	b.n	8003652 <_svfiprintf_r+0xf6>
 8003632:	462f      	mov	r7, r5
 8003634:	e7b8      	b.n	80035a8 <_svfiprintf_r+0x4c>
 8003636:	4a40      	ldr	r2, [pc, #256]	; (8003738 <_svfiprintf_r+0x1dc>)
 8003638:	463d      	mov	r5, r7
 800363a:	1a80      	subs	r0, r0, r2
 800363c:	fa0b f000 	lsl.w	r0, fp, r0
 8003640:	4318      	orrs	r0, r3
 8003642:	9004      	str	r0, [sp, #16]
 8003644:	e7d3      	b.n	80035ee <_svfiprintf_r+0x92>
 8003646:	9a03      	ldr	r2, [sp, #12]
 8003648:	1d11      	adds	r1, r2, #4
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	9103      	str	r1, [sp, #12]
 800364e:	2a00      	cmp	r2, #0
 8003650:	db01      	blt.n	8003656 <_svfiprintf_r+0xfa>
 8003652:	9207      	str	r2, [sp, #28]
 8003654:	e004      	b.n	8003660 <_svfiprintf_r+0x104>
 8003656:	4252      	negs	r2, r2
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	9207      	str	r2, [sp, #28]
 800365e:	9304      	str	r3, [sp, #16]
 8003660:	783b      	ldrb	r3, [r7, #0]
 8003662:	2b2e      	cmp	r3, #46	; 0x2e
 8003664:	d10c      	bne.n	8003680 <_svfiprintf_r+0x124>
 8003666:	787b      	ldrb	r3, [r7, #1]
 8003668:	2b2a      	cmp	r3, #42	; 0x2a
 800366a:	d133      	bne.n	80036d4 <_svfiprintf_r+0x178>
 800366c:	9b03      	ldr	r3, [sp, #12]
 800366e:	3702      	adds	r7, #2
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	9203      	str	r2, [sp, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfb8      	it	lt
 800367a:	f04f 33ff 	movlt.w	r3, #4294967295
 800367e:	9305      	str	r3, [sp, #20]
 8003680:	4d2e      	ldr	r5, [pc, #184]	; (800373c <_svfiprintf_r+0x1e0>)
 8003682:	2203      	movs	r2, #3
 8003684:	7839      	ldrb	r1, [r7, #0]
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f9e8 	bl	8003a5c <memchr>
 800368c:	b138      	cbz	r0, 800369e <_svfiprintf_r+0x142>
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	1b40      	subs	r0, r0, r5
 8003692:	fa03 f000 	lsl.w	r0, r3, r0
 8003696:	9b04      	ldr	r3, [sp, #16]
 8003698:	3701      	adds	r7, #1
 800369a:	4303      	orrs	r3, r0
 800369c:	9304      	str	r3, [sp, #16]
 800369e:	7839      	ldrb	r1, [r7, #0]
 80036a0:	2206      	movs	r2, #6
 80036a2:	4827      	ldr	r0, [pc, #156]	; (8003740 <_svfiprintf_r+0x1e4>)
 80036a4:	1c7e      	adds	r6, r7, #1
 80036a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036aa:	f000 f9d7 	bl	8003a5c <memchr>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d038      	beq.n	8003724 <_svfiprintf_r+0x1c8>
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <_svfiprintf_r+0x1e8>)
 80036b4:	bb13      	cbnz	r3, 80036fc <_svfiprintf_r+0x1a0>
 80036b6:	9b03      	ldr	r3, [sp, #12]
 80036b8:	3307      	adds	r3, #7
 80036ba:	f023 0307 	bic.w	r3, r3, #7
 80036be:	3308      	adds	r3, #8
 80036c0:	9303      	str	r3, [sp, #12]
 80036c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c4:	444b      	add	r3, r9
 80036c6:	9309      	str	r3, [sp, #36]	; 0x24
 80036c8:	e76d      	b.n	80035a6 <_svfiprintf_r+0x4a>
 80036ca:	fb05 3202 	mla	r2, r5, r2, r3
 80036ce:	2001      	movs	r0, #1
 80036d0:	460f      	mov	r7, r1
 80036d2:	e7a6      	b.n	8003622 <_svfiprintf_r+0xc6>
 80036d4:	2300      	movs	r3, #0
 80036d6:	250a      	movs	r5, #10
 80036d8:	4619      	mov	r1, r3
 80036da:	3701      	adds	r7, #1
 80036dc:	9305      	str	r3, [sp, #20]
 80036de:	4638      	mov	r0, r7
 80036e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036e4:	3a30      	subs	r2, #48	; 0x30
 80036e6:	2a09      	cmp	r2, #9
 80036e8:	d903      	bls.n	80036f2 <_svfiprintf_r+0x196>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0c8      	beq.n	8003680 <_svfiprintf_r+0x124>
 80036ee:	9105      	str	r1, [sp, #20]
 80036f0:	e7c6      	b.n	8003680 <_svfiprintf_r+0x124>
 80036f2:	fb05 2101 	mla	r1, r5, r1, r2
 80036f6:	2301      	movs	r3, #1
 80036f8:	4607      	mov	r7, r0
 80036fa:	e7f0      	b.n	80036de <_svfiprintf_r+0x182>
 80036fc:	ab03      	add	r3, sp, #12
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	4622      	mov	r2, r4
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <_svfiprintf_r+0x1ec>)
 8003704:	a904      	add	r1, sp, #16
 8003706:	4640      	mov	r0, r8
 8003708:	f3af 8000 	nop.w
 800370c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003710:	4681      	mov	r9, r0
 8003712:	d1d6      	bne.n	80036c2 <_svfiprintf_r+0x166>
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	065b      	lsls	r3, r3, #25
 8003718:	f53f af35 	bmi.w	8003586 <_svfiprintf_r+0x2a>
 800371c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800371e:	b01d      	add	sp, #116	; 0x74
 8003720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003724:	ab03      	add	r3, sp, #12
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4622      	mov	r2, r4
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <_svfiprintf_r+0x1ec>)
 800372c:	a904      	add	r1, sp, #16
 800372e:	4640      	mov	r0, r8
 8003730:	f000 f882 	bl	8003838 <_printf_i>
 8003734:	e7ea      	b.n	800370c <_svfiprintf_r+0x1b0>
 8003736:	bf00      	nop
 8003738:	08003cf0 	.word	0x08003cf0
 800373c:	08003cf6 	.word	0x08003cf6
 8003740:	08003cfa 	.word	0x08003cfa
 8003744:	00000000 	.word	0x00000000
 8003748:	080034a9 	.word	0x080034a9

0800374c <_printf_common>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	4691      	mov	r9, r2
 8003752:	461f      	mov	r7, r3
 8003754:	688a      	ldr	r2, [r1, #8]
 8003756:	690b      	ldr	r3, [r1, #16]
 8003758:	4606      	mov	r6, r0
 800375a:	4293      	cmp	r3, r2
 800375c:	bfb8      	it	lt
 800375e:	4613      	movlt	r3, r2
 8003760:	f8c9 3000 	str.w	r3, [r9]
 8003764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003768:	460c      	mov	r4, r1
 800376a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800376e:	b112      	cbz	r2, 8003776 <_printf_common+0x2a>
 8003770:	3301      	adds	r3, #1
 8003772:	f8c9 3000 	str.w	r3, [r9]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	0699      	lsls	r1, r3, #26
 800377a:	bf42      	ittt	mi
 800377c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003780:	3302      	addmi	r3, #2
 8003782:	f8c9 3000 	strmi.w	r3, [r9]
 8003786:	6825      	ldr	r5, [r4, #0]
 8003788:	f015 0506 	ands.w	r5, r5, #6
 800378c:	d107      	bne.n	800379e <_printf_common+0x52>
 800378e:	f104 0a19 	add.w	sl, r4, #25
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	f8d9 2000 	ldr.w	r2, [r9]
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	42ab      	cmp	r3, r5
 800379c:	dc29      	bgt.n	80037f2 <_printf_common+0xa6>
 800379e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	3300      	adds	r3, #0
 80037a6:	bf18      	it	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	0692      	lsls	r2, r2, #26
 80037ac:	d42e      	bmi.n	800380c <_printf_common+0xc0>
 80037ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037b2:	4639      	mov	r1, r7
 80037b4:	4630      	mov	r0, r6
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d021      	beq.n	8003800 <_printf_common+0xb4>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	68e5      	ldr	r5, [r4, #12]
 80037c0:	f003 0306 	and.w	r3, r3, #6
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	bf18      	it	ne
 80037c8:	2500      	movne	r5, #0
 80037ca:	f8d9 2000 	ldr.w	r2, [r9]
 80037ce:	f04f 0900 	mov.w	r9, #0
 80037d2:	bf08      	it	eq
 80037d4:	1aad      	subeq	r5, r5, r2
 80037d6:	68a3      	ldr	r3, [r4, #8]
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	bf08      	it	eq
 80037dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bfc4      	itt	gt
 80037e4:	1a9b      	subgt	r3, r3, r2
 80037e6:	18ed      	addgt	r5, r5, r3
 80037e8:	341a      	adds	r4, #26
 80037ea:	454d      	cmp	r5, r9
 80037ec:	d11a      	bne.n	8003824 <_printf_common+0xd8>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e008      	b.n	8003804 <_printf_common+0xb8>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4652      	mov	r2, sl
 80037f6:	4639      	mov	r1, r7
 80037f8:	4630      	mov	r0, r6
 80037fa:	47c0      	blx	r8
 80037fc:	3001      	adds	r0, #1
 80037fe:	d103      	bne.n	8003808 <_printf_common+0xbc>
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003808:	3501      	adds	r5, #1
 800380a:	e7c2      	b.n	8003792 <_printf_common+0x46>
 800380c:	2030      	movs	r0, #48	; 0x30
 800380e:	18e1      	adds	r1, r4, r3
 8003810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800381a:	4422      	add	r2, r4
 800381c:	3302      	adds	r3, #2
 800381e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003822:	e7c4      	b.n	80037ae <_printf_common+0x62>
 8003824:	2301      	movs	r3, #1
 8003826:	4622      	mov	r2, r4
 8003828:	4639      	mov	r1, r7
 800382a:	4630      	mov	r0, r6
 800382c:	47c0      	blx	r8
 800382e:	3001      	adds	r0, #1
 8003830:	d0e6      	beq.n	8003800 <_printf_common+0xb4>
 8003832:	f109 0901 	add.w	r9, r9, #1
 8003836:	e7d8      	b.n	80037ea <_printf_common+0x9e>

08003838 <_printf_i>:
 8003838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800383c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003840:	460c      	mov	r4, r1
 8003842:	7e09      	ldrb	r1, [r1, #24]
 8003844:	b085      	sub	sp, #20
 8003846:	296e      	cmp	r1, #110	; 0x6e
 8003848:	4617      	mov	r7, r2
 800384a:	4606      	mov	r6, r0
 800384c:	4698      	mov	r8, r3
 800384e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003850:	f000 80b3 	beq.w	80039ba <_printf_i+0x182>
 8003854:	d822      	bhi.n	800389c <_printf_i+0x64>
 8003856:	2963      	cmp	r1, #99	; 0x63
 8003858:	d036      	beq.n	80038c8 <_printf_i+0x90>
 800385a:	d80a      	bhi.n	8003872 <_printf_i+0x3a>
 800385c:	2900      	cmp	r1, #0
 800385e:	f000 80b9 	beq.w	80039d4 <_printf_i+0x19c>
 8003862:	2958      	cmp	r1, #88	; 0x58
 8003864:	f000 8083 	beq.w	800396e <_printf_i+0x136>
 8003868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800386c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003870:	e032      	b.n	80038d8 <_printf_i+0xa0>
 8003872:	2964      	cmp	r1, #100	; 0x64
 8003874:	d001      	beq.n	800387a <_printf_i+0x42>
 8003876:	2969      	cmp	r1, #105	; 0x69
 8003878:	d1f6      	bne.n	8003868 <_printf_i+0x30>
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	6813      	ldr	r3, [r2, #0]
 800387e:	0605      	lsls	r5, r0, #24
 8003880:	f103 0104 	add.w	r1, r3, #4
 8003884:	d52a      	bpl.n	80038dc <_printf_i+0xa4>
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6011      	str	r1, [r2, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da03      	bge.n	8003896 <_printf_i+0x5e>
 800388e:	222d      	movs	r2, #45	; 0x2d
 8003890:	425b      	negs	r3, r3
 8003892:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003896:	486f      	ldr	r0, [pc, #444]	; (8003a54 <_printf_i+0x21c>)
 8003898:	220a      	movs	r2, #10
 800389a:	e039      	b.n	8003910 <_printf_i+0xd8>
 800389c:	2973      	cmp	r1, #115	; 0x73
 800389e:	f000 809d 	beq.w	80039dc <_printf_i+0x1a4>
 80038a2:	d808      	bhi.n	80038b6 <_printf_i+0x7e>
 80038a4:	296f      	cmp	r1, #111	; 0x6f
 80038a6:	d020      	beq.n	80038ea <_printf_i+0xb2>
 80038a8:	2970      	cmp	r1, #112	; 0x70
 80038aa:	d1dd      	bne.n	8003868 <_printf_i+0x30>
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f043 0320 	orr.w	r3, r3, #32
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	e003      	b.n	80038be <_printf_i+0x86>
 80038b6:	2975      	cmp	r1, #117	; 0x75
 80038b8:	d017      	beq.n	80038ea <_printf_i+0xb2>
 80038ba:	2978      	cmp	r1, #120	; 0x78
 80038bc:	d1d4      	bne.n	8003868 <_printf_i+0x30>
 80038be:	2378      	movs	r3, #120	; 0x78
 80038c0:	4865      	ldr	r0, [pc, #404]	; (8003a58 <_printf_i+0x220>)
 80038c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038c6:	e055      	b.n	8003974 <_printf_i+0x13c>
 80038c8:	6813      	ldr	r3, [r2, #0]
 80038ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ce:	1d19      	adds	r1, r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6011      	str	r1, [r2, #0]
 80038d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d8:	2301      	movs	r3, #1
 80038da:	e08c      	b.n	80039f6 <_printf_i+0x1be>
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038e2:	6011      	str	r1, [r2, #0]
 80038e4:	bf18      	it	ne
 80038e6:	b21b      	sxthne	r3, r3
 80038e8:	e7cf      	b.n	800388a <_printf_i+0x52>
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	6825      	ldr	r5, [r4, #0]
 80038ee:	1d18      	adds	r0, r3, #4
 80038f0:	6010      	str	r0, [r2, #0]
 80038f2:	0628      	lsls	r0, r5, #24
 80038f4:	d501      	bpl.n	80038fa <_printf_i+0xc2>
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e002      	b.n	8003900 <_printf_i+0xc8>
 80038fa:	0668      	lsls	r0, r5, #25
 80038fc:	d5fb      	bpl.n	80038f6 <_printf_i+0xbe>
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	296f      	cmp	r1, #111	; 0x6f
 8003902:	bf14      	ite	ne
 8003904:	220a      	movne	r2, #10
 8003906:	2208      	moveq	r2, #8
 8003908:	4852      	ldr	r0, [pc, #328]	; (8003a54 <_printf_i+0x21c>)
 800390a:	2100      	movs	r1, #0
 800390c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003910:	6865      	ldr	r5, [r4, #4]
 8003912:	2d00      	cmp	r5, #0
 8003914:	60a5      	str	r5, [r4, #8]
 8003916:	f2c0 8095 	blt.w	8003a44 <_printf_i+0x20c>
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	f021 0104 	bic.w	r1, r1, #4
 8003920:	6021      	str	r1, [r4, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d13d      	bne.n	80039a2 <_printf_i+0x16a>
 8003926:	2d00      	cmp	r5, #0
 8003928:	f040 808e 	bne.w	8003a48 <_printf_i+0x210>
 800392c:	4665      	mov	r5, ip
 800392e:	2a08      	cmp	r2, #8
 8003930:	d10b      	bne.n	800394a <_printf_i+0x112>
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	07db      	lsls	r3, r3, #31
 8003936:	d508      	bpl.n	800394a <_printf_i+0x112>
 8003938:	6923      	ldr	r3, [r4, #16]
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	bfde      	ittt	le
 8003940:	2330      	movle	r3, #48	; 0x30
 8003942:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003946:	f105 35ff 	addle.w	r5, r5, #4294967295
 800394a:	ebac 0305 	sub.w	r3, ip, r5
 800394e:	6123      	str	r3, [r4, #16]
 8003950:	f8cd 8000 	str.w	r8, [sp]
 8003954:	463b      	mov	r3, r7
 8003956:	aa03      	add	r2, sp, #12
 8003958:	4621      	mov	r1, r4
 800395a:	4630      	mov	r0, r6
 800395c:	f7ff fef6 	bl	800374c <_printf_common>
 8003960:	3001      	adds	r0, #1
 8003962:	d14d      	bne.n	8003a00 <_printf_i+0x1c8>
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	b005      	add	sp, #20
 800396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800396e:	4839      	ldr	r0, [pc, #228]	; (8003a54 <_printf_i+0x21c>)
 8003970:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	6821      	ldr	r1, [r4, #0]
 8003978:	1d1d      	adds	r5, r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6015      	str	r5, [r2, #0]
 800397e:	060a      	lsls	r2, r1, #24
 8003980:	d50b      	bpl.n	800399a <_printf_i+0x162>
 8003982:	07ca      	lsls	r2, r1, #31
 8003984:	bf44      	itt	mi
 8003986:	f041 0120 	orrmi.w	r1, r1, #32
 800398a:	6021      	strmi	r1, [r4, #0]
 800398c:	b91b      	cbnz	r3, 8003996 <_printf_i+0x15e>
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	f022 0220 	bic.w	r2, r2, #32
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	e7b7      	b.n	800390a <_printf_i+0xd2>
 800399a:	064d      	lsls	r5, r1, #25
 800399c:	bf48      	it	mi
 800399e:	b29b      	uxthmi	r3, r3
 80039a0:	e7ef      	b.n	8003982 <_printf_i+0x14a>
 80039a2:	4665      	mov	r5, ip
 80039a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039a8:	fb02 3311 	mls	r3, r2, r1, r3
 80039ac:	5cc3      	ldrb	r3, [r0, r3]
 80039ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039b2:	460b      	mov	r3, r1
 80039b4:	2900      	cmp	r1, #0
 80039b6:	d1f5      	bne.n	80039a4 <_printf_i+0x16c>
 80039b8:	e7b9      	b.n	800392e <_printf_i+0xf6>
 80039ba:	6813      	ldr	r3, [r2, #0]
 80039bc:	6825      	ldr	r5, [r4, #0]
 80039be:	1d18      	adds	r0, r3, #4
 80039c0:	6961      	ldr	r1, [r4, #20]
 80039c2:	6010      	str	r0, [r2, #0]
 80039c4:	0628      	lsls	r0, r5, #24
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	d501      	bpl.n	80039ce <_printf_i+0x196>
 80039ca:	6019      	str	r1, [r3, #0]
 80039cc:	e002      	b.n	80039d4 <_printf_i+0x19c>
 80039ce:	066a      	lsls	r2, r5, #25
 80039d0:	d5fb      	bpl.n	80039ca <_printf_i+0x192>
 80039d2:	8019      	strh	r1, [r3, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	4665      	mov	r5, ip
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	e7b9      	b.n	8003950 <_printf_i+0x118>
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	1d19      	adds	r1, r3, #4
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	681d      	ldr	r5, [r3, #0]
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	2100      	movs	r1, #0
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f837 	bl	8003a5c <memchr>
 80039ee:	b108      	cbz	r0, 80039f4 <_printf_i+0x1bc>
 80039f0:	1b40      	subs	r0, r0, r5
 80039f2:	6060      	str	r0, [r4, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fe:	e7a7      	b.n	8003950 <_printf_i+0x118>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	462a      	mov	r2, r5
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0aa      	beq.n	8003964 <_printf_i+0x12c>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	079b      	lsls	r3, r3, #30
 8003a12:	d413      	bmi.n	8003a3c <_printf_i+0x204>
 8003a14:	68e0      	ldr	r0, [r4, #12]
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	bfb8      	it	lt
 8003a1c:	4618      	movlt	r0, r3
 8003a1e:	e7a3      	b.n	8003968 <_printf_i+0x130>
 8003a20:	2301      	movs	r3, #1
 8003a22:	464a      	mov	r2, r9
 8003a24:	4639      	mov	r1, r7
 8003a26:	4630      	mov	r0, r6
 8003a28:	47c0      	blx	r8
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d09a      	beq.n	8003964 <_printf_i+0x12c>
 8003a2e:	3501      	adds	r5, #1
 8003a30:	68e3      	ldr	r3, [r4, #12]
 8003a32:	9a03      	ldr	r2, [sp, #12]
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	42ab      	cmp	r3, r5
 8003a38:	dcf2      	bgt.n	8003a20 <_printf_i+0x1e8>
 8003a3a:	e7eb      	b.n	8003a14 <_printf_i+0x1dc>
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	f104 0919 	add.w	r9, r4, #25
 8003a42:	e7f5      	b.n	8003a30 <_printf_i+0x1f8>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ac      	bne.n	80039a2 <_printf_i+0x16a>
 8003a48:	7803      	ldrb	r3, [r0, #0]
 8003a4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a52:	e76c      	b.n	800392e <_printf_i+0xf6>
 8003a54:	08003d01 	.word	0x08003d01
 8003a58:	08003d12 	.word	0x08003d12

08003a5c <memchr>:
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	b2c9      	uxtb	r1, r1
 8003a60:	4402      	add	r2, r0
 8003a62:	4290      	cmp	r0, r2
 8003a64:	4603      	mov	r3, r0
 8003a66:	d101      	bne.n	8003a6c <memchr+0x10>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e003      	b.n	8003a74 <memchr+0x18>
 8003a6c:	781c      	ldrb	r4, [r3, #0]
 8003a6e:	3001      	adds	r0, #1
 8003a70:	428c      	cmp	r4, r1
 8003a72:	d1f6      	bne.n	8003a62 <memchr+0x6>
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd10      	pop	{r4, pc}

08003a78 <memcpy>:
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	1e43      	subs	r3, r0, #1
 8003a7c:	440a      	add	r2, r1
 8003a7e:	4291      	cmp	r1, r2
 8003a80:	d100      	bne.n	8003a84 <memcpy+0xc>
 8003a82:	bd10      	pop	{r4, pc}
 8003a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a8c:	e7f7      	b.n	8003a7e <memcpy+0x6>

08003a8e <memmove>:
 8003a8e:	4288      	cmp	r0, r1
 8003a90:	b510      	push	{r4, lr}
 8003a92:	eb01 0302 	add.w	r3, r1, r2
 8003a96:	d807      	bhi.n	8003aa8 <memmove+0x1a>
 8003a98:	1e42      	subs	r2, r0, #1
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	d00a      	beq.n	8003ab4 <memmove+0x26>
 8003a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aa2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003aa6:	e7f8      	b.n	8003a9a <memmove+0xc>
 8003aa8:	4283      	cmp	r3, r0
 8003aaa:	d9f5      	bls.n	8003a98 <memmove+0xa>
 8003aac:	1881      	adds	r1, r0, r2
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	42d3      	cmn	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memmove+0x28>
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003abe:	e7f7      	b.n	8003ab0 <memmove+0x22>

08003ac0 <_free_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4605      	mov	r5, r0
 8003ac4:	2900      	cmp	r1, #0
 8003ac6:	d043      	beq.n	8003b50 <_free_r+0x90>
 8003ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003acc:	1f0c      	subs	r4, r1, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfb8      	it	lt
 8003ad2:	18e4      	addlt	r4, r4, r3
 8003ad4:	f000 f8d0 	bl	8003c78 <__malloc_lock>
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <_free_r+0x94>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	4610      	mov	r0, r2
 8003ade:	b933      	cbnz	r3, 8003aee <_free_r+0x2e>
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6014      	str	r4, [r2, #0]
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aea:	f000 b8c6 	b.w	8003c7a <__malloc_unlock>
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	d90b      	bls.n	8003b0a <_free_r+0x4a>
 8003af2:	6821      	ldr	r1, [r4, #0]
 8003af4:	1862      	adds	r2, r4, r1
 8003af6:	4293      	cmp	r3, r2
 8003af8:	bf01      	itttt	eq
 8003afa:	681a      	ldreq	r2, [r3, #0]
 8003afc:	685b      	ldreq	r3, [r3, #4]
 8003afe:	1852      	addeq	r2, r2, r1
 8003b00:	6022      	streq	r2, [r4, #0]
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	6004      	str	r4, [r0, #0]
 8003b06:	e7ed      	b.n	8003ae4 <_free_r+0x24>
 8003b08:	4613      	mov	r3, r2
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	b10a      	cbz	r2, 8003b12 <_free_r+0x52>
 8003b0e:	42a2      	cmp	r2, r4
 8003b10:	d9fa      	bls.n	8003b08 <_free_r+0x48>
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	1858      	adds	r0, r3, r1
 8003b16:	42a0      	cmp	r0, r4
 8003b18:	d10b      	bne.n	8003b32 <_free_r+0x72>
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	4401      	add	r1, r0
 8003b1e:	1858      	adds	r0, r3, r1
 8003b20:	4282      	cmp	r2, r0
 8003b22:	6019      	str	r1, [r3, #0]
 8003b24:	d1de      	bne.n	8003ae4 <_free_r+0x24>
 8003b26:	6810      	ldr	r0, [r2, #0]
 8003b28:	6852      	ldr	r2, [r2, #4]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	e7d8      	b.n	8003ae4 <_free_r+0x24>
 8003b32:	d902      	bls.n	8003b3a <_free_r+0x7a>
 8003b34:	230c      	movs	r3, #12
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	e7d4      	b.n	8003ae4 <_free_r+0x24>
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	1821      	adds	r1, r4, r0
 8003b3e:	428a      	cmp	r2, r1
 8003b40:	bf01      	itttt	eq
 8003b42:	6811      	ldreq	r1, [r2, #0]
 8003b44:	6852      	ldreq	r2, [r2, #4]
 8003b46:	1809      	addeq	r1, r1, r0
 8003b48:	6021      	streq	r1, [r4, #0]
 8003b4a:	6062      	str	r2, [r4, #4]
 8003b4c:	605c      	str	r4, [r3, #4]
 8003b4e:	e7c9      	b.n	8003ae4 <_free_r+0x24>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	20000098 	.word	0x20000098

08003b58 <_malloc_r>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	1ccd      	adds	r5, r1, #3
 8003b5c:	f025 0503 	bic.w	r5, r5, #3
 8003b60:	3508      	adds	r5, #8
 8003b62:	2d0c      	cmp	r5, #12
 8003b64:	bf38      	it	cc
 8003b66:	250c      	movcc	r5, #12
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	db01      	blt.n	8003b72 <_malloc_r+0x1a>
 8003b6e:	42a9      	cmp	r1, r5
 8003b70:	d903      	bls.n	8003b7a <_malloc_r+0x22>
 8003b72:	230c      	movs	r3, #12
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	2000      	movs	r0, #0
 8003b78:	bd70      	pop	{r4, r5, r6, pc}
 8003b7a:	f000 f87d 	bl	8003c78 <__malloc_lock>
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <_malloc_r+0xac>)
 8003b80:	6814      	ldr	r4, [r2, #0]
 8003b82:	4621      	mov	r1, r4
 8003b84:	b991      	cbnz	r1, 8003bac <_malloc_r+0x54>
 8003b86:	4c20      	ldr	r4, [pc, #128]	; (8003c08 <_malloc_r+0xb0>)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	b91b      	cbnz	r3, 8003b94 <_malloc_r+0x3c>
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f000 f863 	bl	8003c58 <_sbrk_r>
 8003b92:	6020      	str	r0, [r4, #0]
 8003b94:	4629      	mov	r1, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 f85e 	bl	8003c58 <_sbrk_r>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d124      	bne.n	8003bea <_malloc_r+0x92>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	f000 f868 	bl	8003c7a <__malloc_unlock>
 8003baa:	e7e4      	b.n	8003b76 <_malloc_r+0x1e>
 8003bac:	680b      	ldr	r3, [r1, #0]
 8003bae:	1b5b      	subs	r3, r3, r5
 8003bb0:	d418      	bmi.n	8003be4 <_malloc_r+0x8c>
 8003bb2:	2b0b      	cmp	r3, #11
 8003bb4:	d90f      	bls.n	8003bd6 <_malloc_r+0x7e>
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	18cc      	adds	r4, r1, r3
 8003bba:	50cd      	str	r5, [r1, r3]
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f000 f85c 	bl	8003c7a <__malloc_unlock>
 8003bc2:	f104 000b 	add.w	r0, r4, #11
 8003bc6:	1d23      	adds	r3, r4, #4
 8003bc8:	f020 0007 	bic.w	r0, r0, #7
 8003bcc:	1ac3      	subs	r3, r0, r3
 8003bce:	d0d3      	beq.n	8003b78 <_malloc_r+0x20>
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	50e2      	str	r2, [r4, r3]
 8003bd4:	e7d0      	b.n	8003b78 <_malloc_r+0x20>
 8003bd6:	684b      	ldr	r3, [r1, #4]
 8003bd8:	428c      	cmp	r4, r1
 8003bda:	bf16      	itet	ne
 8003bdc:	6063      	strne	r3, [r4, #4]
 8003bde:	6013      	streq	r3, [r2, #0]
 8003be0:	460c      	movne	r4, r1
 8003be2:	e7eb      	b.n	8003bbc <_malloc_r+0x64>
 8003be4:	460c      	mov	r4, r1
 8003be6:	6849      	ldr	r1, [r1, #4]
 8003be8:	e7cc      	b.n	8003b84 <_malloc_r+0x2c>
 8003bea:	1cc4      	adds	r4, r0, #3
 8003bec:	f024 0403 	bic.w	r4, r4, #3
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d005      	beq.n	8003c00 <_malloc_r+0xa8>
 8003bf4:	1a21      	subs	r1, r4, r0
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f82e 	bl	8003c58 <_sbrk_r>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d0cf      	beq.n	8003ba0 <_malloc_r+0x48>
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	e7db      	b.n	8003bbc <_malloc_r+0x64>
 8003c04:	20000098 	.word	0x20000098
 8003c08:	2000009c 	.word	0x2000009c

08003c0c <_realloc_r>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	4607      	mov	r7, r0
 8003c10:	4614      	mov	r4, r2
 8003c12:	460e      	mov	r6, r1
 8003c14:	b921      	cbnz	r1, 8003c20 <_realloc_r+0x14>
 8003c16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	f7ff bf9c 	b.w	8003b58 <_malloc_r>
 8003c20:	b922      	cbnz	r2, 8003c2c <_realloc_r+0x20>
 8003c22:	f7ff ff4d 	bl	8003ac0 <_free_r>
 8003c26:	4625      	mov	r5, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2c:	f000 f826 	bl	8003c7c <_malloc_usable_size_r>
 8003c30:	42a0      	cmp	r0, r4
 8003c32:	d20f      	bcs.n	8003c54 <_realloc_r+0x48>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4638      	mov	r0, r7
 8003c38:	f7ff ff8e 	bl	8003b58 <_malloc_r>
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0f2      	beq.n	8003c28 <_realloc_r+0x1c>
 8003c42:	4631      	mov	r1, r6
 8003c44:	4622      	mov	r2, r4
 8003c46:	f7ff ff17 	bl	8003a78 <memcpy>
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f7ff ff37 	bl	8003ac0 <_free_r>
 8003c52:	e7e9      	b.n	8003c28 <_realloc_r+0x1c>
 8003c54:	4635      	mov	r5, r6
 8003c56:	e7e7      	b.n	8003c28 <_realloc_r+0x1c>

08003c58 <_sbrk_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4c05      	ldr	r4, [pc, #20]	; (8003c74 <_sbrk_r+0x1c>)
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	f7fd fa56 	bl	8001114 <_sbrk>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_sbrk_r+0x1a>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_sbrk_r+0x1a>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20000140 	.word	0x20000140

08003c78 <__malloc_lock>:
 8003c78:	4770      	bx	lr

08003c7a <__malloc_unlock>:
 8003c7a:	4770      	bx	lr

08003c7c <_malloc_usable_size_r>:
 8003c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c80:	1f18      	subs	r0, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfbc      	itt	lt
 8003c86:	580b      	ldrlt	r3, [r1, r0]
 8003c88:	18c0      	addlt	r0, r0, r3
 8003c8a:	4770      	bx	lr

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
